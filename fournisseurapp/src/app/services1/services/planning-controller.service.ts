/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPlanning } from '../fn/planning-controller/add-planning';
import { AddPlanning$Params } from '../fn/planning-controller/add-planning';
import { assignTasksToPlanning } from '../fn/planning-controller/assign-tasks-to-planning';
import { AssignTasksToPlanning$Params } from '../fn/planning-controller/assign-tasks-to-planning';
import { getAllPlannings } from '../fn/planning-controller/get-all-plannings';
import { GetAllPlannings$Params } from '../fn/planning-controller/get-all-plannings';
import { getPlanningById } from '../fn/planning-controller/get-planning-by-id';
import { GetPlanningById$Params } from '../fn/planning-controller/get-planning-by-id';
import { getTasksByPlanningId } from '../fn/planning-controller/get-tasks-by-planning-id';
import { GetTasksByPlanningId$Params } from '../fn/planning-controller/get-tasks-by-planning-id';
import { Planning } from '../models/planning';
import { Task } from '../models/task';
import { updatePlanning } from '../fn/planning-controller/update-planning';
import { UpdatePlanning$Params } from '../fn/planning-controller/update-planning';

@Injectable({ providedIn: 'root' })
export class PlanningControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `assignTasksToPlanning()` */
  static readonly AssignTasksToPlanningPath = '/Plan/{idPlan}/assignTasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTasksToPlanning()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTasksToPlanning$Response(params: AssignTasksToPlanning$Params, context?: HttpContext): Observable<StrictHttpResponse<Planning>> {
    return assignTasksToPlanning(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTasksToPlanning$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTasksToPlanning(params: AssignTasksToPlanning$Params, context?: HttpContext): Observable<Planning> {
    return this.assignTasksToPlanning$Response(params, context).pipe(
      map((r: StrictHttpResponse<Planning>): Planning => r.body)
    );
  }

  /** Path part for operation `updatePlanning()` */
  static readonly UpdatePlanningPath = '/Plan/updatePlanning/{idPlan}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePlanning()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePlanning$Response(params: UpdatePlanning$Params, context?: HttpContext): Observable<StrictHttpResponse<Planning>> {
    return updatePlanning(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePlanning$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePlanning(params: UpdatePlanning$Params, context?: HttpContext): Observable<Planning> {
    return this.updatePlanning$Response(params, context).pipe(
      map((r: StrictHttpResponse<Planning>): Planning => r.body)
    );
  }

  /** Path part for operation `addPlanning()` */
  static readonly AddPlanningPath = '/Plan/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPlanning()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPlanning$Response(params: AddPlanning$Params, context?: HttpContext): Observable<StrictHttpResponse<Planning>> {
    return addPlanning(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPlanning$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPlanning(params: AddPlanning$Params, context?: HttpContext): Observable<Planning> {
    return this.addPlanning$Response(params, context).pipe(
      map((r: StrictHttpResponse<Planning>): Planning => r.body)
    );
  }

  /** Path part for operation `getTasksByPlanningId()` */
  static readonly GetTasksByPlanningIdPath = '/Plan/{idPlan}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByPlanningId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByPlanningId$Response(params: GetTasksByPlanningId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getTasksByPlanningId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByPlanningId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByPlanningId(params: GetTasksByPlanningId$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getTasksByPlanningId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `getAllPlannings()` */
  static readonly GetAllPlanningsPath = '/Plan/getPlannings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPlannings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlannings$Response(params?: GetAllPlannings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Planning>>> {
    return getAllPlannings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPlannings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlannings(params?: GetAllPlannings$Params, context?: HttpContext): Observable<Array<Planning>> {
    return this.getAllPlannings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Planning>>): Array<Planning> => r.body)
    );
  }

  /** Path part for operation `getPlanningById()` */
  static readonly GetPlanningByIdPath = '/Plan/getPlanningById/{idPlan}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPlanningById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlanningById$Response(params: GetPlanningById$Params, context?: HttpContext): Observable<StrictHttpResponse<Planning>> {
    return getPlanningById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPlanningById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlanningById(params: GetPlanningById$Params, context?: HttpContext): Observable<Planning> {
    return this.getPlanningById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Planning>): Planning => r.body)
    );
  }

}
