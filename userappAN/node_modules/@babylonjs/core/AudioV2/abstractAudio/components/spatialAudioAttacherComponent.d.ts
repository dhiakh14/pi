import type { Node } from "../../../node";
import { SpatialAudioAttachmentType } from "../../spatialAudioAttachmentType";
import type { _SpatialAudioSubNode } from "../subNodes/spatialAudioSubNode";
import type { _SpatialAudioListener } from "../subProperties/spatialAudioListener";
/**
 * Provides a common interface for attaching an audio listener or source to a specific entity, ensuring only one entity
 * is attached at a time.
 * @internal
 */
export declare class _SpatialAudioAttacherComponent {
    /** @internal */
    private _attachmentType;
    private readonly _position;
    private readonly _rotationQuaternion;
    private _sceneNode;
    private readonly _spatialAudioNode;
    private _useBoundingBox;
    /** @internal */
    constructor(spatialAudioNode: _SpatialAudioSubNode | _SpatialAudioListener);
    /**
     * Returns `true` if the audio listener or source is attached to an entity; otherwise returns `false`.
     */
    get isAttached(): boolean;
    /**
     * Attaches a scene object.
     * @param sceneNode The scene node to attach to.
     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.
     * @param attachmentType Whather to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.
     */
    attach(sceneNode: Node, useBoundingBox: boolean, attachmentType: SpatialAudioAttachmentType): void;
    /**
     * Detaches the attached entity.
     */
    detach(): void;
    /**
     * Releases associated resources.
     */
    dispose: () => void;
    /**
     * Updates the audio listener or source.
     */
    update(): void;
}
