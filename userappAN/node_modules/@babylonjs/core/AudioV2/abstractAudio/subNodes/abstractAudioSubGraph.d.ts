import type { Nullable } from "../../../types";
import type { AbstractNamedAudioNode } from "../abstractAudioNode";
import type { _AbstractAudioSubNode } from "./abstractAudioSubNode";
/**
 * Adds common sub graph functionality to an audio node.
 *
 * Audio nodes such as static sounds, streaming sounds, and buses can use audio sub graphs to process audio internally
 * before sending it to connected downstream audio nodes. This is useful for applying effects, spatial audio, and other
 * audio processing tasks common to multiple audio node classes.
 *
 * A key feature of audio sub graphs is their audio sub nodes are created asynchronously on demand so the minimum set
 * of sub nodes are used at all times to save memory and CPU resources. The tradeoff is a small delay when first
 * setting a property backed by a sub node. This delay is avoided by using the appropriate options to initialize the
 * sub node on creation, e.g. `spatialEnabled` and `stereoEnabled`, or by setting any creation option backed by the
 * sub node, e.g. `spatialPosition` and `stereoPan`.
 *
 * @internal
 */
export declare abstract class _AbstractAudioSubGraph {
    private _createSubNodePromises;
    private _subNodes;
    /**
     * Executes the given callback with the named sub node, creating the sub node if needed.
     *
     * Note that `callback` is executed synchronously if the sub node already exists, otherwise the sub node is created
     * asynchronously before `callback` is executed.
     *
     * @param name The name of the sub node
     * @param callback The function to call with the named sub node
     */
    callOnSubNode<T extends _AbstractAudioSubNode>(name: string, callback: (node: T) => void): void;
    /**
     * Releases associated resources.
     */
    dispose(): void;
    /**
     * Gets a previously created sub node.
     * @param name - The name of the sub node
     * @returns The named sub node, or `null` if it has not been created, yet
     * @internal
     * */
    getSubNode<T extends AbstractNamedAudioNode>(name: string): Nullable<T>;
    protected abstract _createSubNode(name: string): Nullable<Promise<_AbstractAudioSubNode>>;
    /**
     * Called when sub-nodes are added or removed.
     * - Override this to connect and reconnect sub-nodes as needed.
     */
    protected _onSubNodesChanged(): void;
    protected _createSubNodePromisesResolved(): Promise<_AbstractAudioSubNode[]>;
    private _addSubNode;
    protected _createAndAddSubNode(name: string): Promise<_AbstractAudioSubNode>;
    private _onSubNodeDisposed;
}
