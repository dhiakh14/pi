/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addHr } from '../fn/human-resources-rest-controller/add-hr';
import { AddHr$Params } from '../fn/human-resources-rest-controller/add-hr';
import { deleteHr } from '../fn/human-resources-rest-controller/delete-hr';
import { DeleteHr$Params } from '../fn/human-resources-rest-controller/delete-hr';
import { findAll1 } from '../fn/human-resources-rest-controller/find-all-1';
import { FindAll1$Params } from '../fn/human-resources-rest-controller/find-all-1';
import { findById1 } from '../fn/human-resources-rest-controller/find-by-id-1';
import { FindById1$Params } from '../fn/human-resources-rest-controller/find-by-id-1';
import { HumanResources } from '../models/human-resources';
import { updateHr } from '../fn/human-resources-rest-controller/update-hr';
import { UpdateHr$Params } from '../fn/human-resources-rest-controller/update-hr';

@Injectable({ providedIn: 'root' })
export class HumanResourcesRestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateHr()` */
  static readonly UpdateHrPath = '/HumanResources/updateHR/{idHR}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateHr()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHr$Response(params: UpdateHr$Params, context?: HttpContext): Observable<StrictHttpResponse<HumanResources>> {
    return updateHr(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateHr$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHr(params: UpdateHr$Params, context?: HttpContext): Observable<HumanResources> {
    return this.updateHr$Response(params, context).pipe(
      map((r: StrictHttpResponse<HumanResources>): HumanResources => r.body)
    );
  }

  /** Path part for operation `addHr()` */
  static readonly AddHrPath = '/HumanResources/addHR';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addHr()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addHr$Response(params: AddHr$Params, context?: HttpContext): Observable<StrictHttpResponse<HumanResources>> {
    return addHr(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addHr$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addHr(params: AddHr$Params, context?: HttpContext): Observable<HumanResources> {
    return this.addHr$Response(params, context).pipe(
      map((r: StrictHttpResponse<HumanResources>): HumanResources => {
        // If the response is a string (XML), try to parse it as JSON
        if (typeof r.body === 'string') {
          try {
            return JSON.parse(r.body);
          } catch (e) {
            // If parsing fails, return a basic object with the XML string
            return {
              idHR: 0,
              name: '',
              lastName: '',
              email: '',
              phoneNumber: 0,
              availability: true,
              job_Role: 'MASON'
            };
          }
        }
        return r.body;
      })
    );
  }

  /** Path part for operation `findById1()` */
  static readonly FindById1Path = '/HumanResources/findId/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1$Response(params: FindById1$Params, context?: HttpContext): Observable<StrictHttpResponse<HumanResources>> {
    return findById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1(params: FindById1$Params, context?: HttpContext): Observable<HumanResources> {
    return this.findById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<HumanResources>): HumanResources => r.body)
    );
  }

  /** Path part for operation `findAll1()` */
  static readonly FindAll1Path = '/HumanResources/findAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll1$Response(params?: FindAll1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HumanResources>>> {
    return findAll1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll1(params?: FindAll1$Params, context?: HttpContext): Observable<Array<HumanResources>> {
    return this.findAll1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HumanResources>>): Array<HumanResources> => r.body)
    );
  }

  /** Path part for operation `deleteHr()` */
  static readonly DeleteHrPath = '/HumanResources/deleteHR/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteHr()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHr$Response(params: DeleteHr$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteHr(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteHr$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHr(params: DeleteHr$Params, context?: HttpContext): Observable<void> {
    return this.deleteHr$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
