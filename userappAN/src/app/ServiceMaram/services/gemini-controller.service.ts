/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { chatAboutMaterial } from '../fn/gemini-controller/chat-about-material';
import { ChatAboutMaterial$Params } from '../fn/gemini-controller/chat-about-material';
import { chatAboutMaterials } from '../fn/gemini-controller/chat-about-materials';
import { ChatAboutMaterials$Params } from '../fn/gemini-controller/chat-about-materials';

@Injectable({ providedIn: 'root' })
export class GeminiControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `chatAboutMaterials()` */
  static readonly ChatAboutMaterialsPath = '/api/gemini/chat';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `chatAboutMaterials()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chatAboutMaterials$Response(params: ChatAboutMaterials$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return chatAboutMaterials(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `chatAboutMaterials$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chatAboutMaterials(params: ChatAboutMaterials$Params, context?: HttpContext): Observable<string> {
    return this.chatAboutMaterials$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `chatAboutMaterial()` */
  static readonly ChatAboutMaterialPath = '/api/gemini/chat/{materialId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `chatAboutMaterial()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chatAboutMaterial$Response(params: ChatAboutMaterial$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return chatAboutMaterial(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `chatAboutMaterial$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  chatAboutMaterial(params: ChatAboutMaterial$Params, context?: HttpContext): Observable<string> {
    return this.chatAboutMaterial$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
