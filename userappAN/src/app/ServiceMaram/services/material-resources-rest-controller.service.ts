/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addmat } from '../fn/material-resources-rest-controller/addmat';
import { Addmat$Params } from '../fn/material-resources-rest-controller/addmat';
import { deletemat } from '../fn/material-resources-rest-controller/deletemat';
import { Deletemat$Params } from '../fn/material-resources-rest-controller/deletemat';
import { findAll } from '../fn/material-resources-rest-controller/find-all';
import { FindAll$Params } from '../fn/material-resources-rest-controller/find-all';
import { findById } from '../fn/material-resources-rest-controller/find-by-id';
import { FindById$Params } from '../fn/material-resources-rest-controller/find-by-id';
import { MaterialResources } from '../models/material-resources';
import { updateMaterial } from '../fn/material-resources-rest-controller/update-material';
import { UpdateMaterial$Params } from '../fn/material-resources-rest-controller/update-material';

@Injectable({ providedIn: 'root' })
export class MaterialResourcesRestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMaterial()` */
  static readonly UpdateMaterialPath = '/MaterialResources/updateMaterial/{idMR}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMaterial()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaterial$Response(params: UpdateMaterial$Params, context?: HttpContext): Observable<StrictHttpResponse<MaterialResources>> {
    return updateMaterial(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMaterial$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMaterial(params: UpdateMaterial$Params, context?: HttpContext): Observable<MaterialResources> {
    return this.updateMaterial$Response(params, context).pipe(
      map((r: StrictHttpResponse<MaterialResources>): MaterialResources => r.body)
    );
  }

  /** Path part for operation `addmat()` */
  static readonly AddmatPath = '/MaterialResources/addmat';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addmat()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addmat$Response(params: Addmat$Params, context?: HttpContext): Observable<StrictHttpResponse<MaterialResources>> {
    return addmat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addmat$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addmat(params: Addmat$Params, context?: HttpContext): Observable<MaterialResources> {
    return this.addmat$Response(params, context).pipe(
      map((r: StrictHttpResponse<MaterialResources>): MaterialResources => r.body)
    );
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/MaterialResources/findId/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(params: FindById$Params, context?: HttpContext): Observable<StrictHttpResponse<MaterialResources>> {
    return findById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params: FindById$Params, context?: HttpContext): Observable<MaterialResources> {
    return this.findById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MaterialResources>): MaterialResources => r.body)
    );
  }

  /** Path part for operation `findAll()` */
  static readonly FindAllPath = '/MaterialResources/findAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll$Response(params?: FindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MaterialResources>>> {
    return findAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll(params?: FindAll$Params, context?: HttpContext): Observable<Array<MaterialResources>> {
    return this.findAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MaterialResources>>): Array<MaterialResources> => r.body)
    );
  }

  /** Path part for operation `deletemat()` */
  static readonly DeletematPath = '/MaterialResources/deletemat/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletemat()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletemat$Response(params: Deletemat$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletemat(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletemat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletemat(params: Deletemat$Params, context?: HttpContext): Observable<void> {
    return this.deletemat$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
