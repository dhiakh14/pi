{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/moham/Documents/GitHub/pi/userappAN/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"input\"];\nfunction CodeInputComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\")(1, \"input\", 1, 2);\n    i0.ɵɵlistener(\"click\", function CodeInputComponent_span_0_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"paste\", function CodeInputComponent_span_0_Template_input_paste_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onPaste($event, i_r2));\n    })(\"input\", function CodeInputComponent_span_0_Template_input_input_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onInput($event, i_r2));\n    })(\"keydown\", function CodeInputComponent_span_0_Template_input_keydown_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onKeydown($event, i_r2));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"code-hidden\", ctx_r0.isCodeHidden);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r0.inputType)(\"disabled\", ctx_r0.disabled);\n    i0.ɵɵattribute(\"inputmode\", ctx_r0.inputMode)(\"autocapitalize\", ctx_r0.autocapitalize);\n  }\n}\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\nconst defaultComponentConfig = {\n  codeLength: 4,\n  inputType: 'tel',\n  inputMode: 'numeric',\n  initialFocusField: undefined,\n  isCharsCode: false,\n  isCodeHidden: false,\n  isPrevFocusableAfterClearing: true,\n  isFocusingOnLastByClickIfFilled: false,\n  code: undefined,\n  disabled: false,\n  autocapitalize: undefined\n};\nvar InputState;\n(function (InputState) {\n  InputState[InputState[\"ready\"] = 0] = \"ready\";\n  InputState[InputState[\"reset\"] = 1] = \"reset\";\n})(InputState || (InputState = {}));\nclass CodeInputComponent {\n  constructor(config) {\n    /** @deprecated Use isCharsCode prop instead. */\n    this.isNonDigitsCode = false;\n    this.codeChanged = new EventEmitter();\n    this.codeCompleted = new EventEmitter();\n    this.placeholders = [];\n    this.inputs = [];\n    this.inputsStates = [];\n    this.state = {\n      isFocusingAfterAppearingCompleted: false,\n      isInitialFocusFieldEnabled: false\n    };\n    Object.assign(this, defaultComponentConfig);\n    if (!config) {\n      return;\n    }\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n  /**\n   * Life cycle\n   */\n  ngOnInit() {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n  ngAfterViewInit() {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n  ngAfterViewChecked() {\n    this.focusOnInputAfterAppearing();\n  }\n  ngOnChanges(changes) {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n  ngOnDestroy() {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n  /**\n   * Methods\n   */\n  reset(isChangesEmitting = false) {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField);\n    }\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n  focusOnField(index) {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n    this.inputs[index].focus();\n  }\n  onClick(e) {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n  onInput(e, i) {\n    const target = e.target;\n    const value = e.data || target.value;\n    if (this.isEmpty(value)) {\n      return;\n    }\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n    this.inputs[next].focus();\n  }\n  onPaste(e, i) {\n    e.preventDefault();\n    e.stopPropagation();\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n    if (this.isEmpty(data)) {\n      return;\n    }\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data.split('');\n    let valIndex = 0;\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n      const input = this.inputs[j];\n      const val = values[valIndex];\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n  onKeydown(e, i) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const target = e.target;\n      const isTargetEmpty = _this.isEmpty(target.value);\n      const prev = i - 1;\n      // processing only the backspace and delete key events\n      const isBackspaceKey = yield _this.isBackspaceKey(e);\n      const isDeleteKey = _this.isDeleteKey(e);\n      if (!isBackspaceKey && !isDeleteKey) {\n        return;\n      }\n      e.preventDefault();\n      _this.setInputValue(target, null);\n      if (!isTargetEmpty) {\n        _this.emitChanges();\n      }\n      // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n      if (prev < 0 || isDeleteKey) {\n        return;\n      }\n      if (isTargetEmpty || _this.isPrevFocusableAfterClearing) {\n        _this.inputs[prev].focus();\n      }\n    })();\n  }\n  onInputCodeChanges() {\n    if (!this.inputs.length) {\n      return;\n    }\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach(input => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n    this.inputs.forEach((input, index) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n  onCodeLengthChanges() {\n    if (!this.codeLength) {\n      return;\n    }\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    } else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n  onInputsListChanges(list) {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    } else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n  focusOnInputAfterAppearing() {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\n  }\n  emitChanges() {\n    setTimeout(() => this.emitCode(), 50);\n  }\n  emitCode() {\n    const code = this.getCurrentFilledCode();\n    this.codeChanged.emit(code);\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n  getCurrentFilledCode() {\n    let code = '';\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n    return code;\n  }\n  isBackspaceKey(e) {\n    const isBackspace = e.key && e.key.toLowerCase() === 'backspace' || e.keyCode && e.keyCode === 8;\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n  isDeleteKey(e) {\n    return e.key && e.key.toLowerCase() === 'delete' || e.keyCode && e.keyCode === 46;\n  }\n  setInputValue(input, value) {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.add(emptyClassCSS);\n    } else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.remove(emptyClassCSS);\n    }\n  }\n  canInputValue(value) {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || this.isCharsCode || this.isNonDigitsCode;\n  }\n  setStateForInput(input, state) {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n    this.inputsStates[index] = state;\n  }\n  getStateForInput(input) {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n  isEmpty(value) {\n    return value === null || value === undefined || !value.toString().length;\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function CodeInputComponent_Factory(t) {\n      return new (t || CodeInputComponent)(i0.ɵɵdirectiveInject(CodeInputComponentConfigToken, 8));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CodeInputComponent,\n      selectors: [[\"code-input\"]],\n      viewQuery: function CodeInputComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsList = _t);\n        }\n      },\n      inputs: {\n        codeLength: \"codeLength\",\n        inputType: \"inputType\",\n        inputMode: \"inputMode\",\n        initialFocusField: \"initialFocusField\",\n        isNonDigitsCode: \"isNonDigitsCode\",\n        isCharsCode: \"isCharsCode\",\n        isCodeHidden: \"isCodeHidden\",\n        isPrevFocusableAfterClearing: \"isPrevFocusableAfterClearing\",\n        isFocusingOnLastByClickIfFilled: \"isFocusingOnLastByClickIfFilled\",\n        code: \"code\",\n        disabled: \"disabled\",\n        autocapitalize: \"autocapitalize\"\n      },\n      outputs: {\n        codeChanged: \"codeChanged\",\n        codeCompleted: \"codeCompleted\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 1,\n      vars: 1,\n      consts: [[3, \"code-hidden\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"type\", \"disabled\", \"click\", \"paste\", \"input\", \"keydown\"], [\"input\", \"\"]],\n      template: function CodeInputComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, CodeInputComponent_span_0_Template, 3, 6, \"span\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngForOf\", ctx.placeholders);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\"[_nghost-%COMP%]{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]{display:block;flex:1;padding-right:var(--item-spacing)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]:first-child{padding-left:var(--item-spacing)}[_nghost-%COMP%]   span.code-hidden[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}[_nghost-%COMP%]   input.has-value[_ngcontent-%COMP%]{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'code-input',\n      template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.inputmode]=\\\"inputMode\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\",\n      styles: [\":host{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CodeInputComponentConfigToken]\n      }]\n    }];\n  }, {\n    inputsList: [{\n      type: ViewChildren,\n      args: ['input']\n    }],\n    codeLength: [{\n      type: Input\n    }],\n    inputType: [{\n      type: Input\n    }],\n    inputMode: [{\n      type: Input\n    }],\n    initialFocusField: [{\n      type: Input\n    }],\n    isNonDigitsCode: [{\n      type: Input\n    }],\n    isCharsCode: [{\n      type: Input\n    }],\n    isCodeHidden: [{\n      type: Input\n    }],\n    isPrevFocusableAfterClearing: [{\n      type: Input\n    }],\n    isFocusingOnLastByClickIfFilled: [{\n      type: Input\n    }],\n    code: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    autocapitalize: [{\n      type: Input\n    }],\n    codeChanged: [{\n      type: Output\n    }],\n    codeCompleted: [{\n      type: Output\n    }]\n  });\n})();\nclass CodeInputModule {\n  static forRoot(config) {\n    return {\n      ngModule: CodeInputModule,\n      providers: [{\n        provide: CodeInputComponentConfigToken,\n        useValue: config\n      }]\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function CodeInputModule_Factory(t) {\n      return new (t || CodeInputModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CodeInputModule\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CodeInputComponent],\n      exports: [CodeInputComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of code-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodeInputComponent, CodeInputComponentConfigToken, CodeInputModule, defaultComponentConfig };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Component","Optional","Inject","ViewChildren","Input","Output","NgModule","i1","CommonModule","_c0","CodeInputComponent_span_0_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","CodeInputComponent_span_0_Template_input_click_1_listener","$event","ɵɵrestoreView","ctx_r4","ɵɵnextContext","ɵɵresetView","onClick","CodeInputComponent_span_0_Template_input_paste_1_listener","restoredCtx","i_r2","index","ctx_r6","onPaste","CodeInputComponent_span_0_Template_input_input_1_listener","ctx_r7","onInput","CodeInputComponent_span_0_Template_input_keydown_1_listener","ctx_r8","onKeydown","ɵɵelementEnd","ctx_r0","ɵɵclassProp","isCodeHidden","ɵɵadvance","ɵɵproperty","inputType","disabled","ɵɵattribute","inputMode","autocapitalize","CodeInputComponentConfigToken","defaultComponentConfig","codeLength","initialFocusField","undefined","isCharsCode","isPrevFocusableAfterClearing","isFocusingOnLastByClickIfFilled","code","InputState","CodeInputComponent","constructor","config","isNonDigitsCode","codeChanged","codeCompleted","placeholders","inputs","inputsStates","state","isFocusingAfterAppearingCompleted","isInitialFocusFieldEnabled","Object","assign","prop","hasOwnProperty","ngOnInit","isEmpty","onCodeLengthChanges","ngAfterViewInit","inputsListSubscription","inputsList","changes","subscribe","onInputsListChanges","bind","ngAfterViewChecked","focusOnInputAfterAppearing","ngOnChanges","onInputCodeChanges","ngOnDestroy","unsubscribe","reset","isChangesEmitting","focusOnField","emitChanges","_codeLength","Error","focus","e","target","last","isFilled","getCurrentFilledCode","length","setTimeout","i","value","data","canInputValue","preventDefault","stopPropagation","setInputValue","setStateForInput","values","toString","trim","split","j","next","blur","clipboardData","getData","valIndex","input","val","_this","_asyncToGenerator","isTargetEmpty","prev","isBackspaceKey","isDeleteKey","forEach","chars","isAllCharsAreAllowed","char","numbers","Array","fill","splice","list","inputsToAdd","filter","item","map","nativeElement","states","ready","document","activeElement","emitCode","emit","isBackspace","key","toLowerCase","keyCode","Promise","resolve","isReset","getStateForInput","selectionStart","valueClassCSS","emptyClassCSS","classList","remove","parentElement","add","isDigitsValue","test","indexOf","ɵfac","CodeInputComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CodeInputComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","CodeInputComponent_Template","ɵɵtemplate","dependencies","NgForOf","styles","ngDevMode","ɵsetClassMetadata","args","selector","decorators","CodeInputModule","forRoot","ngModule","providers","provide","useValue","CodeInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["C:/Users/moham/Documents/GitHub/pi/userappAN/node_modules/angular-code-input/fesm2022/angular-code-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\nconst defaultComponentConfig = {\n    codeLength: 4,\n    inputType: 'tel',\n    inputMode: 'numeric',\n    initialFocusField: undefined,\n    isCharsCode: false,\n    isCodeHidden: false,\n    isPrevFocusableAfterClearing: true,\n    isFocusingOnLastByClickIfFilled: false,\n    code: undefined,\n    disabled: false,\n    autocapitalize: undefined\n};\n\nvar InputState;\n(function (InputState) {\n    InputState[InputState[\"ready\"] = 0] = \"ready\";\n    InputState[InputState[\"reset\"] = 1] = \"reset\";\n})(InputState || (InputState = {}));\nclass CodeInputComponent {\n    constructor(config) {\n        /** @deprecated Use isCharsCode prop instead. */\n        this.isNonDigitsCode = false;\n        this.codeChanged = new EventEmitter();\n        this.codeCompleted = new EventEmitter();\n        this.placeholders = [];\n        this.inputs = [];\n        this.inputsStates = [];\n        this.state = {\n            isFocusingAfterAppearingCompleted: false,\n            isInitialFocusFieldEnabled: false\n        };\n        Object.assign(this, defaultComponentConfig);\n        if (!config) {\n            return;\n        }\n        // filtering for only valid config props\n        for (const prop in config) {\n            if (!config.hasOwnProperty(prop)) {\n                continue;\n            }\n            if (!defaultComponentConfig.hasOwnProperty(prop)) {\n                continue;\n            }\n            // @ts-ignore\n            this[prop] = config[prop];\n        }\n    }\n    /**\n     * Life cycle\n     */\n    ngOnInit() {\n        // defining the state\n        this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n        // initiating the code\n        this.onCodeLengthChanges();\n    }\n    ngAfterViewInit() {\n        // initiation of the inputs\n        this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n        this.onInputsListChanges(this.inputsList);\n    }\n    ngAfterViewChecked() {\n        this.focusOnInputAfterAppearing();\n    }\n    ngOnChanges(changes) {\n        if (changes.code) {\n            this.onInputCodeChanges();\n        }\n        if (changes.codeLength) {\n            this.onCodeLengthChanges();\n        }\n    }\n    ngOnDestroy() {\n        if (this.inputsListSubscription) {\n            this.inputsListSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Methods\n     */\n    reset(isChangesEmitting = false) {\n        // resetting the code to its initial value or to an empty value\n        this.onInputCodeChanges();\n        if (this.state.isInitialFocusFieldEnabled) {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.focusOnField(this.initialFocusField);\n        }\n        if (isChangesEmitting) {\n            this.emitChanges();\n        }\n    }\n    focusOnField(index) {\n        if (index >= this._codeLength) {\n            throw new Error('The index of the focusing input box should be less than the codeLength.');\n        }\n        this.inputs[index].focus();\n    }\n    onClick(e) {\n        // handle click events only if the the prop is enabled\n        if (!this.isFocusingOnLastByClickIfFilled) {\n            return;\n        }\n        const target = e.target;\n        const last = this.inputs[this._codeLength - 1];\n        // already focused\n        if (target === last) {\n            return;\n        }\n        // check filling\n        const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n        if (!isFilled) {\n            return;\n        }\n        // focusing on the last input if is filled\n        setTimeout(() => last.focus());\n    }\n    onInput(e, i) {\n        const target = e.target;\n        const value = e.data || target.value;\n        if (this.isEmpty(value)) {\n            return;\n        }\n        // only digits are allowed if isCharsCode flag is absent/false\n        if (!this.canInputValue(value)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.setInputValue(target, null);\n            this.setStateForInput(target, InputState.reset);\n            return;\n        }\n        const values = value.toString().trim().split('');\n        for (let j = 0; j < values.length; j++) {\n            const index = j + i;\n            if (index > this._codeLength - 1) {\n                break;\n            }\n            this.setInputValue(this.inputs[index], values[j]);\n        }\n        this.emitChanges();\n        const next = i + values.length;\n        if (next > this._codeLength - 1) {\n            target.blur();\n            return;\n        }\n        this.inputs[next].focus();\n    }\n    onPaste(e, i) {\n        e.preventDefault();\n        e.stopPropagation();\n        const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n        if (this.isEmpty(data)) {\n            return;\n        }\n        // Convert paste text into iterable\n        // tslint:disable-next-line:no-non-null-assertion\n        const values = data.split('');\n        let valIndex = 0;\n        for (let j = i; j < this.inputs.length; j++) {\n            // The values end is reached. Loop exit\n            if (valIndex === values.length) {\n                break;\n            }\n            const input = this.inputs[j];\n            const val = values[valIndex];\n            // Cancel the loop when a value cannot be used\n            if (!this.canInputValue(val)) {\n                this.setInputValue(input, null);\n                this.setStateForInput(input, InputState.reset);\n                return;\n            }\n            this.setInputValue(input, val.toString());\n            valIndex++;\n        }\n        this.inputs[i].blur();\n        this.emitChanges();\n    }\n    async onKeydown(e, i) {\n        const target = e.target;\n        const isTargetEmpty = this.isEmpty(target.value);\n        const prev = i - 1;\n        // processing only the backspace and delete key events\n        const isBackspaceKey = await this.isBackspaceKey(e);\n        const isDeleteKey = this.isDeleteKey(e);\n        if (!isBackspaceKey && !isDeleteKey) {\n            return;\n        }\n        e.preventDefault();\n        this.setInputValue(target, null);\n        if (!isTargetEmpty) {\n            this.emitChanges();\n        }\n        // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n        if (prev < 0 || isDeleteKey) {\n            return;\n        }\n        if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n            this.inputs[prev].focus();\n        }\n    }\n    onInputCodeChanges() {\n        if (!this.inputs.length) {\n            return;\n        }\n        if (this.isEmpty(this.code)) {\n            this.inputs.forEach((input) => {\n                this.setInputValue(input, null);\n            });\n            return;\n        }\n        // tslint:disable-next-line:no-non-null-assertion\n        const chars = this.code.toString().trim().split('');\n        // checking if all the values are correct\n        let isAllCharsAreAllowed = true;\n        for (const char of chars) {\n            if (!this.canInputValue(char)) {\n                isAllCharsAreAllowed = false;\n                break;\n            }\n        }\n        this.inputs.forEach((input, index) => {\n            const value = isAllCharsAreAllowed ? chars[index] : null;\n            this.setInputValue(input, value);\n        });\n    }\n    onCodeLengthChanges() {\n        if (!this.codeLength) {\n            return;\n        }\n        this._codeLength = this.codeLength;\n        if (this._codeLength > this.placeholders.length) {\n            const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n            this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n        }\n        else if (this._codeLength < this.placeholders.length) {\n            this.placeholders.splice(this._codeLength);\n        }\n    }\n    onInputsListChanges(list) {\n        if (list.length > this.inputs.length) {\n            const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n            this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n            const states = Array(inputsToAdd.length).fill(InputState.ready);\n            this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n        }\n        else if (list.length < this.inputs.length) {\n            this.inputs.splice(list.length);\n            this.inputsStates.splice(list.length);\n        }\n        // filling the inputs after changing of their count\n        this.onInputCodeChanges();\n    }\n    focusOnInputAfterAppearing() {\n        if (!this.state.isInitialFocusFieldEnabled) {\n            return;\n        }\n        if (this.state.isFocusingAfterAppearingCompleted) {\n            return;\n        }\n        // tslint:disable-next-line:no-non-null-assertion\n        this.focusOnField(this.initialFocusField);\n        // tslint:disable-next-line:no-non-null-assertion\n        this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\n    }\n    emitChanges() {\n        setTimeout(() => this.emitCode(), 50);\n    }\n    emitCode() {\n        const code = this.getCurrentFilledCode();\n        this.codeChanged.emit(code);\n        if (code.length >= this._codeLength) {\n            this.codeCompleted.emit(code);\n        }\n    }\n    getCurrentFilledCode() {\n        let code = '';\n        for (const input of this.inputs) {\n            if (!this.isEmpty(input.value)) {\n                code += input.value;\n            }\n        }\n        return code;\n    }\n    isBackspaceKey(e) {\n        const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n        if (isBackspace) {\n            return Promise.resolve(true);\n        }\n        // process only key with placeholder keycode on android devices\n        if (!e.keyCode || e.keyCode !== 229) {\n            return Promise.resolve(false);\n        }\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                const input = e.target;\n                const isReset = this.getStateForInput(input) === InputState.reset;\n                if (isReset) {\n                    this.setStateForInput(input, InputState.ready);\n                }\n                // if backspace key pressed the caret will have position 0 (for single value field)\n                resolve(input.selectionStart === 0 && !isReset);\n            });\n        });\n    }\n    isDeleteKey(e) {\n        return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\n    }\n    setInputValue(input, value) {\n        const isEmpty = this.isEmpty(value);\n        const valueClassCSS = 'has-value';\n        const emptyClassCSS = 'empty';\n        if (isEmpty) {\n            input.value = '';\n            input.classList.remove(valueClassCSS);\n            // tslint:disable-next-line:no-non-null-assertion\n            input.parentElement.classList.add(emptyClassCSS);\n        }\n        else {\n            input.value = value;\n            input.classList.add(valueClassCSS);\n            // tslint:disable-next-line:no-non-null-assertion\n            input.parentElement.classList.remove(emptyClassCSS);\n        }\n    }\n    canInputValue(value) {\n        if (this.isEmpty(value)) {\n            return false;\n        }\n        const isDigitsValue = /^[0-9]+$/.test(value.toString());\n        return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n    }\n    setStateForInput(input, state) {\n        const index = this.inputs.indexOf(input);\n        if (index < 0) {\n            return;\n        }\n        this.inputsStates[index] = state;\n    }\n    getStateForInput(input) {\n        const index = this.inputs.indexOf(input);\n        return this.inputsStates[index];\n    }\n    isEmpty(value) {\n        return value === null || value === undefined || !value.toString().length;\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputComponent, deps: [{ token: CodeInputComponentConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: CodeInputComponent, selector: \"code-input\", inputs: { codeLength: \"codeLength\", inputType: \"inputType\", inputMode: \"inputMode\", initialFocusField: \"initialFocusField\", isNonDigitsCode: \"isNonDigitsCode\", isCharsCode: \"isCharsCode\", isCodeHidden: \"isCodeHidden\", isPrevFocusableAfterClearing: \"isPrevFocusableAfterClearing\", isFocusingOnLastByClickIfFilled: \"isFocusingOnLastByClickIfFilled\", code: \"code\", disabled: \"disabled\", autocapitalize: \"autocapitalize\" }, outputs: { codeChanged: \"codeChanged\", codeCompleted: \"codeCompleted\" }, viewQueries: [{ propertyName: \"inputsList\", predicate: [\"input\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.inputmode]=\\\"inputMode\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\", styles: [\":host{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'code-input', template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.inputmode]=\\\"inputMode\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\", styles: [\":host{--text-security-type: disc;--item-spacing: 4px;--item-height: 4.375em;--item-border: 1px solid #dddddd;--item-border-bottom: 1px solid #dddddd;--item-border-has-value: 1px solid #dddddd;--item-border-bottom-has-value: 1px solid #dddddd;--item-border-focused: 1px solid #dddddd;--item-border-bottom-focused: 1px solid #dddddd;--item-shadow-focused: 0px 1px 5px rgba(221, 221, 221, 1);--item-border-radius: 5px;--item-background: transparent;--item-font-weight: 300;--color: #171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;font-weight:var(--item-font-weight);border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translate3d(0,0,0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CodeInputComponentConfigToken]\n                }] }]; }, propDecorators: { inputsList: [{\n                type: ViewChildren,\n                args: ['input']\n            }], codeLength: [{\n                type: Input\n            }], inputType: [{\n                type: Input\n            }], inputMode: [{\n                type: Input\n            }], initialFocusField: [{\n                type: Input\n            }], isNonDigitsCode: [{\n                type: Input\n            }], isCharsCode: [{\n                type: Input\n            }], isCodeHidden: [{\n                type: Input\n            }], isPrevFocusableAfterClearing: [{\n                type: Input\n            }], isFocusingOnLastByClickIfFilled: [{\n                type: Input\n            }], code: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], autocapitalize: [{\n                type: Input\n            }], codeChanged: [{\n                type: Output\n            }], codeCompleted: [{\n                type: Output\n            }] } });\n\nclass CodeInputModule {\n    static forRoot(config) {\n        return {\n            ngModule: CodeInputModule,\n            providers: [\n                { provide: CodeInputComponentConfigToken, useValue: config }\n            ]\n        };\n    }\n    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputModule, declarations: [CodeInputComponent], imports: [CommonModule], exports: [CodeInputComponent] }); }\n    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: CodeInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        CodeInputComponent\n                    ],\n                    exports: [\n                        CodeInputComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of code-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodeInputComponent, CodeInputComponentConfigToken, CodeInputModule, defaultComponentConfig };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}