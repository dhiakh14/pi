{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { authenticate } from '../fn/authentication/authenticate';\nimport { authenticateWithGoogle } from '../fn/authentication/authenticate-with-google';\nimport { confirm } from '../fn/authentication/confirm';\nimport { forgotPassword } from '../fn/authentication/forgot-password';\nimport { register } from '../fn/authentication/register';\nimport { resetPassword } from '../fn/authentication/reset-password';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthenticationService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `resetPassword()` */\n  static {\n    this.ResetPasswordPath = '/auth/reset-password';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `resetPassword()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  resetPassword$Response(params, context) {\n    return resetPassword(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `resetPassword$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  resetPassword(params, context) {\n    return this.resetPassword$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `authenticateWithGoogle()` */\n  static {\n    this.AuthenticateWithGooglePath = '/auth/google';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `authenticateWithGoogle()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  authenticateWithGoogle$Response(params, context) {\n    return authenticateWithGoogle(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `authenticateWithGoogle$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  authenticateWithGoogle(params, context) {\n    return this.authenticateWithGoogle$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `forgotPassword()` */\n  static {\n    this.ForgotPasswordPath = '/auth/forgot-password';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `forgotPassword()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  forgotPassword$Response(params, context) {\n    return forgotPassword(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `forgotPassword$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  forgotPassword(params, context) {\n    return this.forgotPassword$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `authenticate()` */\n  static {\n    this.AuthenticatePath = '/auth/authenticate';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `authenticate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  authenticate$Response(params, context) {\n    return authenticate(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  authenticate(params, context) {\n    return this.authenticate$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `register()` */\n  static {\n    this.RegisterPath = '/auth/Register';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `register()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  register$Response(params, context) {\n    return register(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `register$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  register(params, context) {\n    return this.register$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `confirm()` */\n  static {\n    this.ConfirmPath = '/auth/activate-account';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `confirm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  confirm$Response(params, context) {\n    return confirm(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `confirm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  confirm(params, context) {\n    return this.confirm$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","authenticate","authenticateWithGoogle","confirm","forgotPassword","register","resetPassword","AuthenticationService","constructor","config","http","ResetPasswordPath","resetPassword$Response","params","context","rootUrl","pipe","r","body","AuthenticateWithGooglePath","authenticateWithGoogle$Response","ForgotPasswordPath","forgotPassword$Response","AuthenticatePath","authenticate$Response","RegisterPath","register$Response","ConfirmPath","confirm$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\services\\services\\authentication.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { AuthenficationResponse } from '../models/authenfication-response';\r\nimport { authenticate } from '../fn/authentication/authenticate';\r\nimport { Authenticate$Params } from '../fn/authentication/authenticate';\r\nimport { authenticateWithGoogle } from '../fn/authentication/authenticate-with-google';\r\nimport { AuthenticateWithGoogle$Params } from '../fn/authentication/authenticate-with-google';\r\nimport { confirm } from '../fn/authentication/confirm';\r\nimport { Confirm$Params } from '../fn/authentication/confirm';\r\nimport { forgotPassword } from '../fn/authentication/forgot-password';\r\nimport { ForgotPassword$Params } from '../fn/authentication/forgot-password';\r\nimport { register } from '../fn/authentication/register';\r\nimport { Register$Params } from '../fn/authentication/register';\r\nimport { resetPassword } from '../fn/authentication/reset-password';\r\nimport { ResetPassword$Params } from '../fn/authentication/reset-password';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `resetPassword()` */\r\n  static readonly ResetPasswordPath = '/auth/reset-password';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `resetPassword()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetPassword$Response(params: ResetPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return resetPassword(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `resetPassword$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetPassword(params: ResetPassword$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.resetPassword$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `authenticateWithGoogle()` */\r\n  static readonly AuthenticateWithGooglePath = '/auth/google';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `authenticateWithGoogle()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  authenticateWithGoogle$Response(params: AuthenticateWithGoogle$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenficationResponse>> {\r\n    return authenticateWithGoogle(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `authenticateWithGoogle$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  authenticateWithGoogle(params: AuthenticateWithGoogle$Params, context?: HttpContext): Observable<AuthenficationResponse> {\r\n    return this.authenticateWithGoogle$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<AuthenficationResponse>): AuthenficationResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `forgotPassword()` */\r\n  static readonly ForgotPasswordPath = '/auth/forgot-password';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `forgotPassword()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  forgotPassword$Response(params: ForgotPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return forgotPassword(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `forgotPassword$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  forgotPassword(params: ForgotPassword$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.forgotPassword$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `authenticate()` */\r\n  static readonly AuthenticatePath = '/auth/authenticate';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `authenticate()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate$Response(params: Authenticate$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenficationResponse>> {\r\n    return authenticate(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<AuthenficationResponse> {\r\n    return this.authenticate$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<AuthenficationResponse>): AuthenficationResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `register()` */\r\n  static readonly RegisterPath = '/auth/Register';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `register()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return register(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `register$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register(params: Register$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.register$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `confirm()` */\r\n  static readonly ConfirmPath = '/auth/activate-account';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `confirm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  confirm$Response(params: Confirm$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return confirm(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `confirm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  confirm(params: Confirm$Params, context?: HttpContext): Observable<void> {\r\n    return this.confirm$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}