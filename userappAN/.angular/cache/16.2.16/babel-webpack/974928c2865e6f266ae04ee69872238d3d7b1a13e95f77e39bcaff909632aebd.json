{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { predictStatus } from '../fn/status-prediction-controller/predict-status';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\n;\nexport class StatusPredictionControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation predictStatus() */\n  static {\n    this.PredictStatusPath = '/predict/project_status';\n  }\n  /**\n   * This method provides access to the full HttpResponse, allowing access to response headers.\n   * To access only the response body, use predictStatus() instead.\n   *\n   * This method sends application/json and handles request body of type application/json.\n   */\n  predictStatus$Response(params, context) {\n    return predictStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), predictStatus$Response() instead.\n   *\n   * This method sends application/json and handles request body of type application/json.\n   */\n  predictStatus(params, context) {\n    return this.predictStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function StatusPredictionControllerService_Factory(t) {\n      return new (t || StatusPredictionControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StatusPredictionControllerService,\n      factory: StatusPredictionControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","predictStatus","StatusPredictionControllerService","constructor","config","http","PredictStatusPath","predictStatus$Response","params","context","rootUrl","pipe","r","body","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\servicesAbir\\services\\status-prediction-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { PredictionResponseDto } from '../models/prediction-response-dto';\r\nimport { predictStatus, PredictStatus$Params } from '../fn/status-prediction-controller/predict-status';\r\n;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StatusPredictionControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation predictStatus() */\r\n  static readonly PredictStatusPath = '/predict/project_status';\r\n\r\n  /**\r\n   * This method provides access to the full HttpResponse, allowing access to response headers.\r\n   * To access only the response body, use predictStatus() instead.\r\n   *\r\n   * This method sends application/json and handles request body of type application/json.\r\n   */\r\n  predictStatus$Response(params: PredictStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PredictionResponseDto>> {\r\n    return predictStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), predictStatus$Response() instead.\r\n   *\r\n   * This method sends application/json and handles request body of type application/json.\r\n   */\r\n  predictStatus(params: PredictStatus$Params, context?: HttpContext): Observable<PredictionResponseDto> {\r\n    return this.predictStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PredictionResponseDto>): PredictionResponseDto => r.body)\r\n    );\r\n  }\r\n\r\n}"],"mappings":"AAOA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,aAAa,QAA8B,mDAAmD;;;;AACvG;AAGA,OAAM,MAAOC,iCAAkC,SAAQF,WAAW;EAChEG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAC,iBAAiB,GAAG,yBAAyB;EAAC;EAE9D;;;;;;EAMAC,sBAAsBA,CAACC,MAA4B,EAAEC,OAAqB;IACxE,OAAOR,aAAa,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACK,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAChE;EAEA;;;;;;EAMAR,aAAaA,CAACO,MAA4B,EAAEC,OAAqB;IAC/D,OAAO,IAAI,CAACF,sBAAsB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDZ,GAAG,CAAEa,CAA4C,IAA4BA,CAAC,CAACC,IAAI,CAAC,CACrF;EACH;;;uBA5BWX,iCAAiC,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAjCjB,iCAAiC;MAAAkB,OAAA,EAAjClB,iCAAiC,CAAAmB,IAAA;MAAAC,UAAA,EADpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}