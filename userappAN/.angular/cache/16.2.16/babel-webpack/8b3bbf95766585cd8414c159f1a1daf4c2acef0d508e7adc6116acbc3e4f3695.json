{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nexport class TokenService {\n  constructor() {\n    this.tokenKey = 'token';\n  }\n  set token(token) {\n    localStorage.setItem('token', token);\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  getDecodedToken() {\n    const token = this.token;\n    if (token) {\n      return jwtDecode(token);\n    }\n    return null;\n  }\n  getUserId() {\n    const decoded = this.getDecodedToken();\n    console.log(\"Decoded Token:\", decoded);\n    return decoded?.idUser || null;\n  }\n  isAuthenticated() {\n    return this.token !== null;\n  }\n  getDateOfBirth() {\n    const decoded = this.getDecodedToken();\n    if (decoded?.dateOfBirth) {\n      if (typeof decoded.dateOfBirth === 'string') {\n        return decoded.dateOfBirth;\n      } else if (decoded.dateOfBirth instanceof Date) {\n        return decoded.dateOfBirth.toISOString().split('T')[0];\n      }\n    }\n    return null;\n  }\n  getUserRoles() {\n    const decoded = this.getDecodedToken();\n    console.log('Decoded Token:', decoded);\n    if (decoded?.roles && Array.isArray(decoded.roles)) {\n      return decoded.roles.map(role => role.toUpperCase());\n    }\n    return [];\n  }\n  clearToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  static {\n    this.ɵfac = function TokenService_Factory(t) {\n      return new (t || TokenService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenService,\n      factory: TokenService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["jwtDecode","TokenService","constructor","tokenKey","token","localStorage","setItem","getItem","getDecodedToken","getUserId","decoded","console","log","idUser","isAuthenticated","getDateOfBirth","dateOfBirth","Date","toISOString","split","getUserRoles","roles","Array","isArray","map","role","toUpperCase","clearToken","removeItem","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\token\\token.service.ts"],"sourcesContent":["  import { Injectable } from '@angular/core';\r\n  import { jwtDecode } from 'jwt-decode';\r\n\r\n\r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class TokenService {\r\n    private readonly tokenKey = 'token';\r\n\r\n  set token(token : string){\r\n    localStorage.setItem('token', token);\r\n  }\r\n  get token(){\r\n    return localStorage.getItem('token') as string;\r\n  }\r\n  getDecodedToken(): any {\r\n    const token = this.token;\r\n    if (token) {\r\n      return jwtDecode(token);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getUserId(): number | null {\r\n    const decoded = this.getDecodedToken();\r\n    console.log(\"Decoded Token:\", decoded);\r\n    return decoded?.idUser || null; \r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.token !== null;\r\n  }\r\n\r\n  getDateOfBirth(): string | null {\r\n    const decoded = this.getDecodedToken();\r\n    if (decoded?.dateOfBirth) {\r\n      if (typeof decoded.dateOfBirth === 'string') {\r\n        return decoded.dateOfBirth;\r\n      } else if (decoded.dateOfBirth instanceof Date) {\r\n        return decoded.dateOfBirth.toISOString().split('T')[0];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getUserRoles(): string[] {\r\n    const decoded = this.getDecodedToken();\r\n    console.log('Decoded Token:', decoded); \r\n  \r\n    if (decoded?.roles && Array.isArray(decoded.roles)) {\r\n      return decoded.roles.map((role: string) => role.toUpperCase()); \r\n    }\r\n  \r\n    return [];\r\n  }\r\n  \r\n  \r\n  clearToken(): void {\r\n    localStorage.removeItem(this.tokenKey); \r\n  }\r\n  \r\n  }\r\n"],"mappings":"AACE,SAASA,SAAS,QAAQ,YAAY;;AAMtC,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAImB,KAAAC,QAAQ,GAAG,OAAO;;EAErC,IAAIC,KAAKA,CAACA,KAAc;IACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EACA,IAAIA,KAAKA,CAAA;IACP,OAAOC,YAAY,CAACE,OAAO,CAAC,OAAO,CAAW;EAChD;EACAC,eAAeA,CAAA;IACb,MAAMJ,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIA,KAAK,EAAE;MACT,OAAOJ,SAAS,CAACI,KAAK,CAAC;;IAEzB,OAAO,IAAI;EACb;EAEAK,SAASA,CAAA;IACP,MAAMC,OAAO,GAAG,IAAI,CAACF,eAAe,EAAE;IACtCG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,OAAO,CAAC;IACtC,OAAOA,OAAO,EAAEG,MAAM,IAAI,IAAI;EAChC;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACV,KAAK,KAAK,IAAI;EAC5B;EAEAW,cAAcA,CAAA;IACZ,MAAML,OAAO,GAAG,IAAI,CAACF,eAAe,EAAE;IACtC,IAAIE,OAAO,EAAEM,WAAW,EAAE;MACxB,IAAI,OAAON,OAAO,CAACM,WAAW,KAAK,QAAQ,EAAE;QAC3C,OAAON,OAAO,CAACM,WAAW;OAC3B,MAAM,IAAIN,OAAO,CAACM,WAAW,YAAYC,IAAI,EAAE;QAC9C,OAAOP,OAAO,CAACM,WAAW,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;;IAG1D,OAAO,IAAI;EACb;EAEAC,YAAYA,CAAA;IACV,MAAMV,OAAO,GAAG,IAAI,CAACF,eAAe,EAAE;IACtCG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,OAAO,CAAC;IAEtC,IAAIA,OAAO,EAAEW,KAAK,IAAIC,KAAK,CAACC,OAAO,CAACb,OAAO,CAACW,KAAK,CAAC,EAAE;MAClD,OAAOX,OAAO,CAACW,KAAK,CAACG,GAAG,CAAEC,IAAY,IAAKA,IAAI,CAACC,WAAW,EAAE,CAAC;;IAGhE,OAAO,EAAE;EACX;EAGAC,UAAUA,CAAA;IACRtB,YAAY,CAACuB,UAAU,CAAC,IAAI,CAACzB,QAAQ,CAAC;EACxC;;;uBArDaF,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAA4B,OAAA,EAAZ5B,YAAY,CAAA6B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}