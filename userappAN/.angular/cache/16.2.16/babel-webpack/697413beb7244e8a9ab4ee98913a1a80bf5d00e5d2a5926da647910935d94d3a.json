{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nexport let DashboardArijComponent = class DashboardArijComponent {\n  constructor(supplierService, router) {\n    this.supplierService = supplierService;\n    this.router = router;\n    this.showSummary = true; // Initially show the summary\n    this.showCategoryChart = false; // Add a flag to control visibility of the category chart\n    this.chartData = {\n      labels: ['Active', 'Inactive'],\n      datasets: [{\n        data: [0, 0],\n        backgroundColor: ['#36A2EB', '#FF6384'],\n        hoverBackgroundColor: ['#36A2EB', '#FF6384']\n      }]\n    };\n    this.categoryChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        backgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70'],\n        hoverBackgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70']\n      }]\n    };\n    this.summary = {\n      totalSuppliers: 0,\n      activeSuppliers: 0,\n      inactiveSuppliers: 0,\n      newSuppliersThisMonth: 0\n    };\n    this.clickCountChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        backgroundColor: '#36A2EB',\n        borderColor: '#36A2EB',\n        borderWidth: 1\n      }]\n    };\n  }\n  ngOnInit() {\n    this.loadSupplierStatusBreakdown();\n    this.loadSuppliersByClickCount();\n    this.loadSupplierCategoryBreakdown();\n  }\n  loadSupplierStatusBreakdown() {\n    this.supplierService.getSupplierStatusBreakdown().subscribe(data => {\n      this.chartData = {\n        labels: ['Active', 'Inactive'],\n        datasets: [{\n          data: [data.activeCount, data.inactiveCount],\n          backgroundColor: ['#36A2EB', '#FF6384'],\n          hoverBackgroundColor: ['#36A2EB', '#FF6384']\n        }]\n      };\n    });\n    this.supplierService.getSummary().subscribe(summaryData => {\n      this.summary = summaryData;\n    });\n  }\n  loadSuppliersByClickCount() {\n    this.supplierService.getSuppliers().subscribe(data => {\n      const supplierNames = data.map(supplier => supplier.name);\n      const clickCounts = data.map(supplier => supplier.clickCount || 0);\n      this.clickCountChartData = {\n        labels: supplierNames,\n        datasets: [{\n          data: clickCounts,\n          backgroundColor: '#36A2EB',\n          borderColor: '#36A2EB',\n          borderWidth: 1\n        }]\n      };\n    });\n  }\n  // Navigate to the filtered suppliers list based on the selected category\n  filterByActive() {\n    this.router.navigate(['/suppliers'], {\n      queryParams: {\n        status: 'ACTIVE'\n      }\n    });\n  }\n  filterByInactive() {\n    this.router.navigate(['/suppliers'], {\n      queryParams: {\n        status: 'INACTIVE'\n      }\n    });\n  }\n  filterByNew() {\n    this.router.navigate(['/suppliers'], {\n      queryParams: {\n        newThisMonth: 'true'\n      }\n    });\n  }\n  loadSupplierCategoryBreakdown() {\n    this.supplierService.getSupplierCategoryBreakdown().subscribe(data => {\n      // Ensure that categories and counts are typed correctly\n      const categories = Object.keys(data);\n      const counts = Object.values(data).map(value => Number(value)); // Ensure it's an array of numbers\n      this.categoryChartData = {\n        labels: categories,\n        datasets: [{\n          data: counts,\n          backgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70'],\n          hoverBackgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70']\n        }]\n      };\n      this.showCategoryChart = true; // Show the category chart after loading data\n    });\n  }\n\n  goBack() {\n    this.router.navigate(['/suppliers']);\n  }\n  goToMap() {\n    this.router.navigate(['/supplier-map']);\n  }\n  goToPrediction() {\n    this.router.navigate(['/prediction']); // Navigate to the Prediction page\n  }\n};\n\nDashboardArijComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  animations: [trigger('slideInOut', [transition(':enter', [style({\n    transform: 'translateX(100%)'\n  }), animate('0.5s ease-in-out', style({\n    transform: 'translateX(0)'\n  }))]), transition(':leave', [style({\n    transform: 'translateX(0)'\n  }), animate('0.5s ease-in-out', style({\n    transform: 'translateX(-100%)'\n  }))])])]\n})], DashboardArijComponent);","map":{"version":3,"names":["Component","trigger","transition","style","animate","DashboardArijComponent","constructor","supplierService","router","showSummary","showCategoryChart","chartData","labels","datasets","data","backgroundColor","hoverBackgroundColor","categoryChartData","summary","totalSuppliers","activeSuppliers","inactiveSuppliers","newSuppliersThisMonth","clickCountChartData","borderColor","borderWidth","ngOnInit","loadSupplierStatusBreakdown","loadSuppliersByClickCount","loadSupplierCategoryBreakdown","getSupplierStatusBreakdown","subscribe","activeCount","inactiveCount","getSummary","summaryData","getSuppliers","supplierNames","map","supplier","name","clickCounts","clickCount","filterByActive","navigate","queryParams","status","filterByInactive","filterByNew","newThisMonth","getSupplierCategoryBreakdown","categories","Object","keys","counts","values","value","Number","goBack","goToMap","goToPrediction","__decorate","selector","templateUrl","styleUrls","animations","transform"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\pages\\dashboardArij\\dashboardArij.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { SupplierService } from 'src/app/service-arij/supplier.service';\nimport { Router } from '@angular/router';\nimport { ChartData } from 'chart.js';\nimport { trigger, transition, style, animate } from '@angular/animations';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  animations: [\n    trigger('slideInOut', [\n      transition(':enter', [\n        style({ transform: 'translateX(100%)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(0)' }))\n      ]),\n      transition(':leave', [\n        style({ transform: 'translateX(0)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n      ])\n    ])\n  ]\n})\nexport class DashboardArijComponent implements OnInit {\n  showSummary = true; // Initially show the summary\n  showCategoryChart = false; // Add a flag to control visibility of the category chart\n\n  chartData: ChartData<'pie'> = {\n    labels: ['Active', 'Inactive'],\n    datasets: [\n      {\n        data: [0, 0],\n        backgroundColor: ['#36A2EB', '#FF6384'],\n        hoverBackgroundColor: ['#36A2EB', '#FF6384']\n      }\n    ]\n  };\n\n  categoryChartData: ChartData<'doughnut'> = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70'],\n        hoverBackgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70']\n      }\n    ]\n  };\n\n  summary = {\n    totalSuppliers: 0,\n    activeSuppliers: 0,\n    inactiveSuppliers: 0,\n    newSuppliersThisMonth: 0\n  };\n  clickCountChartData: ChartData<'bar'> = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: '#36A2EB',\n        borderColor: '#36A2EB',\n        borderWidth: 1\n      }\n    ]\n  };\n\n  constructor(private supplierService: SupplierService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.loadSupplierStatusBreakdown();\n    this.loadSuppliersByClickCount();\n    this.loadSupplierCategoryBreakdown(); \n  }\n\n  loadSupplierStatusBreakdown(): void {\n    this.supplierService.getSupplierStatusBreakdown().subscribe((data) => {\n      this.chartData = {\n        labels: ['Active', 'Inactive'],\n        datasets: [\n          {\n            data: [data.activeCount, data.inactiveCount],\n            backgroundColor: ['#36A2EB', '#FF6384'],\n            hoverBackgroundColor: ['#36A2EB', '#FF6384']\n          }\n        ]\n      };\n    });\n\n    this.supplierService.getSummary().subscribe((summaryData) => {\n      this.summary = summaryData;\n    });\n  }\n\n  loadSuppliersByClickCount(): void {\n    this.supplierService.getSuppliers().subscribe((data) => {\n      const supplierNames = data.map((supplier) => supplier.name);\n      const clickCounts = data.map((supplier) => supplier.clickCount || 0);\n\n      this.clickCountChartData = {\n        labels: supplierNames,\n        datasets: [\n          {\n            data: clickCounts,\n            backgroundColor: '#36A2EB',\n            borderColor: '#36A2EB',\n            borderWidth: 1\n          }\n        ]\n      };\n    });\n  }\n\n  // Navigate to the filtered suppliers list based on the selected category\n  filterByActive(): void {\n    this.router.navigate(['/suppliers'], { queryParams: { status: 'ACTIVE' } });\n  }\n\n  filterByInactive(): void {\n    this.router.navigate(['/suppliers'], { queryParams: { status: 'INACTIVE' } });\n  }\n\n  filterByNew(): void {\n    this.router.navigate(['/suppliers'], { queryParams: { newThisMonth: 'true' } });\n  }\n\n  loadSupplierCategoryBreakdown(): void {\n  this.supplierService.getSupplierCategoryBreakdown().subscribe((data) => {\n    // Ensure that categories and counts are typed correctly\n    const categories: string[] = Object.keys(data);\n    const counts: number[] = Object.values(data).map(value => Number(value)); // Ensure it's an array of numbers\n\n    this.categoryChartData = {\n      labels: categories,\n      datasets: [\n        {\n          data: counts,  // Explicitly use number[] for data\n          backgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70'],\n          hoverBackgroundColor: ['#FFCC00', '#4CAF50', '#FF6384', '#36A2EB', '#FFCD70']\n        }\n      ]\n    };\n\n    this.showCategoryChart = true; // Show the category chart after loading data\n  });\n}\n\n\n  goBack(): void {\n    this.router.navigate(['/suppliers']);\n  }\n\n  goToMap(): void {\n    this.router.navigate(['/supplier-map']);\n  }\n\n  goToPrediction(): void {\n    this.router.navigate(['/prediction']);  // Navigate to the Prediction page\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}