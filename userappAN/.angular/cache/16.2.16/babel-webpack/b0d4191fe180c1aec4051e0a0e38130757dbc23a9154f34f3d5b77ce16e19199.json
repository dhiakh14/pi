{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { assignAndReplaceRoleToUser } from '../fn/user-controller/assign-and-replace-role-to-user';\nimport { assignRoleToUser } from '../fn/user-controller/assign-role-to-user';\nimport { banUser } from '../fn/user-controller/ban-user';\nimport { getAllUsersExceptMe } from '../fn/user-controller/get-all-users-except-me';\nimport { getProfile } from '../fn/user-controller/get-profile';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `banUser()` */\n  static {\n    this.BanUserPath = '/users/{idUser}/ban';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `banUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  banUser$Response(params, context) {\n    return banUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `banUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  banUser(params, context) {\n    return this.banUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `assignAndReplaceRoleToUser()` */\n  static {\n    this.AssignAndReplaceRoleToUserPath = '/users/{idUser}/assignAndReplaceRoleToUser';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `assignAndReplaceRoleToUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  assignAndReplaceRoleToUser$Response(params, context) {\n    return assignAndReplaceRoleToUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `assignAndReplaceRoleToUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  assignAndReplaceRoleToUser(params, context) {\n    return this.assignAndReplaceRoleToUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `assignRoleToUser()` */\n  static {\n    this.AssignRoleToUserPath = '/users/{idUser}/assign-role';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `assignRoleToUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  assignRoleToUser$Response(params, context) {\n    return assignRoleToUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `assignRoleToUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  assignRoleToUser(params, context) {\n    return this.assignRoleToUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getProfile()` */\n  static {\n    this.GetProfilePath = '/users/getUserById/{idUser}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getProfile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProfile$Response(params, context) {\n    return getProfile(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getProfile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProfile(params, context) {\n    return this.getProfile$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllUsersExceptMe()` */\n  static {\n    this.GetAllUsersExceptMePath = '/users/all-except-me';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllUsersExceptMe()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllUsersExceptMe$Response(params, context) {\n    return getAllUsersExceptMe(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllUsersExceptMe$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllUsersExceptMe(params, context) {\n    return this.getAllUsersExceptMe$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function UserControllerService_Factory(t) {\n      return new (t || UserControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserControllerService,\n      factory: UserControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","assignAndReplaceRoleToUser","assignRoleToUser","banUser","getAllUsersExceptMe","getProfile","UserControllerService","constructor","config","http","BanUserPath","banUser$Response","params","context","rootUrl","pipe","r","body","AssignAndReplaceRoleToUserPath","assignAndReplaceRoleToUser$Response","AssignRoleToUserPath","assignRoleToUser$Response","GetProfilePath","getProfile$Response","GetAllUsersExceptMePath","getAllUsersExceptMe$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\services\\services\\user-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { assignAndReplaceRoleToUser } from '../fn/user-controller/assign-and-replace-role-to-user';\r\nimport { AssignAndReplaceRoleToUser$Params } from '../fn/user-controller/assign-and-replace-role-to-user';\r\nimport { assignRoleToUser } from '../fn/user-controller/assign-role-to-user';\r\nimport { AssignRoleToUser$Params } from '../fn/user-controller/assign-role-to-user';\r\nimport { banUser } from '../fn/user-controller/ban-user';\r\nimport { BanUser$Params } from '../fn/user-controller/ban-user';\r\nimport { getAllUsersExceptMe } from '../fn/user-controller/get-all-users-except-me';\r\nimport { GetAllUsersExceptMe$Params } from '../fn/user-controller/get-all-users-except-me';\r\nimport { getProfile } from '../fn/user-controller/get-profile';\r\nimport { GetProfile$Params } from '../fn/user-controller/get-profile';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `banUser()` */\r\n  static readonly BanUserPath = '/users/{idUser}/ban';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `banUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  banUser$Response(params: BanUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return banUser(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `banUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  banUser(params: BanUser$Params, context?: HttpContext): Observable<string> {\r\n    return this.banUser$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `assignAndReplaceRoleToUser()` */\r\n  static readonly AssignAndReplaceRoleToUserPath = '/users/{idUser}/assignAndReplaceRoleToUser';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `assignAndReplaceRoleToUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  assignAndReplaceRoleToUser$Response(params: AssignAndReplaceRoleToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return assignAndReplaceRoleToUser(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `assignAndReplaceRoleToUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  assignAndReplaceRoleToUser(params: AssignAndReplaceRoleToUser$Params, context?: HttpContext): Observable<string> {\r\n    return this.assignAndReplaceRoleToUser$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `assignRoleToUser()` */\r\n  static readonly AssignRoleToUserPath = '/users/{idUser}/assign-role';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `assignRoleToUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  assignRoleToUser$Response(params: AssignRoleToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return assignRoleToUser(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `assignRoleToUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  assignRoleToUser(params: AssignRoleToUser$Params, context?: HttpContext): Observable<string> {\r\n    return this.assignRoleToUser$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getProfile()` */\r\n  static readonly GetProfilePath = '/users/getUserById/{idUser}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getProfile()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProfile$Response(params: GetProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {\r\n    return getProfile(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getProfile$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProfile(params: GetProfile$Params, context?: HttpContext): Observable<User> {\r\n    return this.getProfile$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<User>): User => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getAllUsersExceptMe()` */\r\n  static readonly GetAllUsersExceptMePath = '/users/all-except-me';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllUsersExceptMe()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllUsersExceptMe$Response(params: GetAllUsersExceptMe$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {\r\n    return getAllUsersExceptMe(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllUsersExceptMe$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllUsersExceptMe(params: GetAllUsersExceptMe$Params, context?: HttpContext): Observable<Array<User>> {\r\n    return this.getAllUsersExceptMe$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}