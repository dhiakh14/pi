{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PredictionStatutComponent = class PredictionStatutComponent {\n  constructor(fb, apiService) {\n    this.fb = fb;\n    this.apiService = apiService;\n    this.predictionResult = null;\n    this.isLoading = false;\n    this.errorMessage = null;\n    this.predictionForm = this.fb.group({\n      name: ['', Validators.required],\n      duration: ['', [Validators.required, Validators.min(0)]]\n    });\n  }\n  predictStatus() {\n    if (this.predictionForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.errorMessage = null;\n    this.predictionResult = null;\n    const projectData = {\n      name: this.predictionForm.value.name,\n      duration: this.predictionForm.value.duration\n    };\n    this.apiService.predictStatus({\n      body: projectData\n    }).subscribe({\n      next: response => {\n        this.predictionResult = response.body;\n        this.isLoading = false;\n      },\n      error: err => {\n        this.errorMessage = 'Erreur lors de la prédiction: ' + (err.error?.message || err.message);\n        this.isLoading = false;\n      }\n    });\n  }\n  resetForm() {\n    this.predictionForm.reset();\n    this.predictionResult = null;\n    this.errorMessage = null;\n  }\n};\nPredictionStatutComponent = __decorate([Component({\n  selector: 'app-prediction-statut',\n  templateUrl: './prediction-statut.component.html',\n  styleUrls: ['./prediction-statut.component.css']\n})], PredictionStatutComponent);","map":{"version":3,"names":["Component","PredictionStatutComponent","constructor","fb","apiService","predictionResult","isLoading","errorMessage","predictionForm","group","name","Validators","required","duration","min","predictStatus","invalid","projectData","value","body","subscribe","next","response","error","err","message","resetForm","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\pages\\prediction-statut\\prediction-statut.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { PredictProjectStatus$Params } from 'src/app/servicesAbir/fn/project-controller/predict-project-status';\r\nimport { ProjectControllerService } from 'src/app/servicesAbir/services';\r\n\r\n@Component({\r\n  selector: 'app-prediction-statut',\r\n  templateUrl: './prediction-statut.component.html',\r\n  styleUrls: ['./prediction-statut.component.css']\r\n})\r\nexport class PredictionStatutComponent {\r\n  predictionForm: FormGroup;\r\n  predictionResult: PredictRespoPnseDto | null = null;\r\n  isLoading = false;\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private apiService: ApiService\r\n  ) {\r\n    this.predictionForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      duration: ['', [Validators.required, Validators.min(0)]]\r\n    });\r\n  }\r\n\r\n  predictStatus(): void {\r\n    if (this.predictionForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n    this.predictionResult = null;\r\n\r\n    const projectData: ProjectDto = {\r\n      name: this.predictionForm.value.name,\r\n      duration: this.predictionForm.value.duration\r\n    };\r\n\r\n    this.apiService.predictStatus({ body: projectData }).subscribe({\r\n      next: (response) => {\r\n        this.predictionResult = response.body;\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = 'Erreur lors de la prédiction: ' + (err.error?.message || err.message);\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.predictionForm.reset();\r\n    this.predictionResult = null;\r\n    this.errorMessage = null;\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAMpCC,YACUC,EAAe,EACfC,UAAsB;IADtB,KAAAD,EAAE,GAAFA,EAAE;IACF,KAAAC,UAAU,GAAVA,UAAU;IANpB,KAAAC,gBAAgB,GAA+B,IAAI;IACnD,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,YAAY,GAAkB,IAAI;IAMhC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAClCC,IAAI,EAAE,CAAC,EAAE,EAAEC,UAAU,CAACC,QAAQ,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACF,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;KACxD,CAAC;EACJ;EAEAC,aAAaA,CAAA;IACX,IAAI,IAAI,CAACP,cAAc,CAACQ,OAAO,EAAE;MAC/B;;IAGF,IAAI,CAACV,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACF,gBAAgB,GAAG,IAAI;IAE5B,MAAMY,WAAW,GAAe;MAC9BP,IAAI,EAAE,IAAI,CAACF,cAAc,CAACU,KAAK,CAACR,IAAI;MACpCG,QAAQ,EAAE,IAAI,CAACL,cAAc,CAACU,KAAK,CAACL;KACrC;IAED,IAAI,CAACT,UAAU,CAACW,aAAa,CAAC;MAAEI,IAAI,EAAEF;IAAW,CAAE,CAAC,CAACG,SAAS,CAAC;MAC7DC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACjB,gBAAgB,GAAGiB,QAAQ,CAACH,IAAI;QACrC,IAAI,CAACb,SAAS,GAAG,KAAK;MACxB,CAAC;MACDiB,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACjB,YAAY,GAAG,gCAAgC,IAAIiB,GAAG,CAACD,KAAK,EAAEE,OAAO,IAAID,GAAG,CAACC,OAAO,CAAC;QAC1F,IAAI,CAACnB,SAAS,GAAG,KAAK;MACxB;KACD,CAAC;EACJ;EAEAoB,SAASA,CAAA;IACP,IAAI,CAAClB,cAAc,CAACmB,KAAK,EAAE;IAC3B,IAAI,CAACtB,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACE,YAAY,GAAG,IAAI;EAC1B;CAED;AAhDYN,yBAAyB,GAAA2B,UAAA,EALrC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACW9B,yBAAyB,CAgDrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}