{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { addProject } from '../fn/project-controller/add-project';\nimport { countProjectsByStatus } from '../fn/project-controller/count-projects-by-status';\nimport { deleteProject } from '../fn/project-controller/delete-project';\nimport { findProjectById } from '../fn/project-controller/find-project-by-id';\nimport { getAllProjects } from '../fn/project-controller/get-all-projects';\nimport { getAverageDuration } from '../fn/project-controller/get-average-duration';\nimport { getProjectLocation } from '../fn/project-controller/get-project-location';\nimport { getProjectProgress } from '../fn/project-controller/get-project-progress';\nimport { getRemainingDays } from '../fn/project-controller/get-remaining-days';\nimport { getStatisticsByStatus } from '../fn/project-controller/get-statistics-by-status';\nimport { predictProjectStatus } from '../fn/project-controller/predict-project-status';\nimport { updateProject } from '../fn/project-controller/update-project';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ProjectControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `updateProject()` */\n  static {\n    this.UpdateProjectPath = '/project/updateProject/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateProject()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateProject$Response(params, context) {\n    return updateProject(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `updateProject$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateProject(params, context) {\n    return this.updateProject$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `predictProjectStatus()` */\n  static {\n    this.PredictProjectStatusPath = '/project/predictStatus';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `predictProjectStatus()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  predictProjectStatus$Response(params, context) {\n    return predictProjectStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `predictProjectStatus$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  predictProjectStatus(params, context) {\n    return this.predictProjectStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `addProject()` */\n  static {\n    this.AddProjectPath = '/project/addProject';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addProject()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addProject$Response(params, context) {\n    return addProject(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addProject$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addProject(params, context) {\n    return this.addProject$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getStatisticsByStatus()` */\n  static {\n    this.GetStatisticsByStatusPath = '/project/statisticsByStatus';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatisticsByStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatisticsByStatus$Response(params, context) {\n    return getStatisticsByStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatisticsByStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatisticsByStatus(params, context) {\n    return this.getStatisticsByStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getRemainingDays()` */\n  static {\n    this.GetRemainingDaysPath = '/project/remainingDays/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRemainingDays()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRemainingDays$Response(params, context) {\n    return getRemainingDays(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getRemainingDays$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRemainingDays(params, context) {\n    return this.getRemainingDays$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getProjectProgress()` */\n  static {\n    this.GetProjectProgressPath = '/project/progress/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getProjectProgress()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProjectProgress$Response(params, context) {\n    return getProjectProgress(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getProjectProgress$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProjectProgress(params, context) {\n    return this.getProjectProgress$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getProjectLocation()` */\n  static {\n    this.GetProjectLocationPath = '/project/location/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getProjectLocation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProjectLocation$Response(params, context) {\n    return getProjectLocation(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getProjectLocation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getProjectLocation(params, context) {\n    return this.getProjectLocation$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `countProjectsByStatus()` */\n  static {\n    this.CountProjectsByStatusPath = '/project/getProjectsByStatus/{status}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `countProjectsByStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  countProjectsByStatus$Response(params, context) {\n    return countProjectsByStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `countProjectsByStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  countProjectsByStatus(params, context) {\n    return this.countProjectsByStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findProjectById()` */\n  static {\n    this.FindProjectByIdPath = '/project/getProjectById/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findProjectById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findProjectById$Response(params, context) {\n    return findProjectById(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findProjectById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findProjectById(params, context) {\n    return this.findProjectById$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllProjects()` */\n  static {\n    this.GetAllProjectsPath = '/project/getAllProjects';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllProjects()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllProjects$Response(params, context) {\n    return getAllProjects(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllProjects$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllProjects(params, context) {\n    return this.getAllProjects$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAverageDuration()` */\n  static {\n    this.GetAverageDurationPath = '/project/averageDuration';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAverageDuration()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAverageDuration$Response(params, context) {\n    return getAverageDuration(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAverageDuration$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAverageDuration(params, context) {\n    return this.getAverageDuration$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteProject()` */\n  static {\n    this.DeleteProjectPath = '/project/deleteProject/{idProject}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteProject()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteProject$Response(params, context) {\n    return deleteProject(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteProject$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteProject(params, context) {\n    return this.deleteProject$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function ProjectControllerService_Factory(t) {\n      return new (t || ProjectControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProjectControllerService,\n      factory: ProjectControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","addProject","countProjectsByStatus","deleteProject","findProjectById","getAllProjects","getAverageDuration","getProjectLocation","getProjectProgress","getRemainingDays","getStatisticsByStatus","predictProjectStatus","updateProject","ProjectControllerService","constructor","config","http","UpdateProjectPath","updateProject$Response","params","context","rootUrl","pipe","r","body","PredictProjectStatusPath","predictProjectStatus$Response","AddProjectPath","addProject$Response","GetStatisticsByStatusPath","getStatisticsByStatus$Response","GetRemainingDaysPath","getRemainingDays$Response","GetProjectProgressPath","getProjectProgress$Response","GetProjectLocationPath","getProjectLocation$Response","CountProjectsByStatusPath","countProjectsByStatus$Response","FindProjectByIdPath","findProjectById$Response","GetAllProjectsPath","getAllProjects$Response","GetAverageDurationPath","getAverageDuration$Response","DeleteProjectPath","deleteProject$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\servicesAbir\\services\\project-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { addProject } from '../fn/project-controller/add-project';\r\nimport { AddProject$Params } from '../fn/project-controller/add-project';\r\nimport { countProjectsByStatus } from '../fn/project-controller/count-projects-by-status';\r\nimport { CountProjectsByStatus$Params } from '../fn/project-controller/count-projects-by-status';\r\nimport { deleteProject } from '../fn/project-controller/delete-project';\r\nimport { DeleteProject$Params } from '../fn/project-controller/delete-project';\r\nimport { findProjectById } from '../fn/project-controller/find-project-by-id';\r\nimport { FindProjectById$Params } from '../fn/project-controller/find-project-by-id';\r\nimport { getAllProjects } from '../fn/project-controller/get-all-projects';\r\nimport { GetAllProjects$Params } from '../fn/project-controller/get-all-projects';\r\nimport { getAverageDuration } from '../fn/project-controller/get-average-duration';\r\nimport { GetAverageDuration$Params } from '../fn/project-controller/get-average-duration';\r\nimport { getProjectLocation } from '../fn/project-controller/get-project-location';\r\nimport { GetProjectLocation$Params } from '../fn/project-controller/get-project-location';\r\nimport { getProjectProgress } from '../fn/project-controller/get-project-progress';\r\nimport { GetProjectProgress$Params } from '../fn/project-controller/get-project-progress';\r\nimport { getRemainingDays } from '../fn/project-controller/get-remaining-days';\r\nimport { GetRemainingDays$Params } from '../fn/project-controller/get-remaining-days';\r\nimport { getStatisticsByStatus } from '../fn/project-controller/get-statistics-by-status';\r\nimport { GetStatisticsByStatus$Params } from '../fn/project-controller/get-statistics-by-status';\r\nimport { predictProjectStatus } from '../fn/project-controller/predict-project-status';\r\nimport { PredictProjectStatus$Params } from '../fn/project-controller/predict-project-status';\r\nimport { Project } from '../models/project';\r\nimport { updateProject } from '../fn/project-controller/update-project';\r\nimport { UpdateProject$Params } from '../fn/project-controller/update-project';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProjectControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `updateProject()` */\r\n  static readonly UpdateProjectPath = '/project/updateProject/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateProject()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateProject$Response(params: UpdateProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {\r\n    return updateProject(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateProject$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateProject(params: UpdateProject$Params, context?: HttpContext): Observable<Project> {\r\n    return this.updateProject$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Project>): Project => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `predictProjectStatus()` */\r\n  static readonly PredictProjectStatusPath = '/project/predictStatus';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `predictProjectStatus()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  predictProjectStatus$Response(params: PredictProjectStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return predictProjectStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `predictProjectStatus$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  predictProjectStatus(params: PredictProjectStatus$Params, context?: HttpContext): Observable<string> {\r\n    return this.predictProjectStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `addProject()` */\r\n  static readonly AddProjectPath = '/project/addProject';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addProject()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addProject$Response(params: AddProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {\r\n    return addProject(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addProject$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addProject(params: AddProject$Params, context?: HttpContext): Observable<Project> {\r\n    return this.addProject$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Project>): Project => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getStatisticsByStatus()` */\r\n  static readonly GetStatisticsByStatusPath = '/project/statisticsByStatus';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getStatisticsByStatus()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getStatisticsByStatus$Response(params?: GetStatisticsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n[key: string]: number;\r\n}>> {\r\n    return getStatisticsByStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getStatisticsByStatus$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getStatisticsByStatus(params?: GetStatisticsByStatus$Params, context?: HttpContext): Observable<{\r\n[key: string]: number;\r\n}> {\r\n    return this.getStatisticsByStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n[key: string]: number;\r\n}>): {\r\n[key: string]: number;\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getRemainingDays()` */\r\n  static readonly GetRemainingDaysPath = '/project/remainingDays/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRemainingDays()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemainingDays$Response(params: GetRemainingDays$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n[key: string]: {\r\n};\r\n}>> {\r\n    return getRemainingDays(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getRemainingDays$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemainingDays(params: GetRemainingDays$Params, context?: HttpContext): Observable<{\r\n[key: string]: {\r\n};\r\n}> {\r\n    return this.getRemainingDays$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n[key: string]: {\r\n};\r\n}>): {\r\n[key: string]: {\r\n};\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getProjectProgress()` */\r\n  static readonly GetProjectProgressPath = '/project/progress/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getProjectProgress()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProjectProgress$Response(params: GetProjectProgress$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return getProjectProgress(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getProjectProgress$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProjectProgress(params: GetProjectProgress$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.getProjectProgress$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getProjectLocation()` */\r\n  static readonly GetProjectLocationPath = '/project/location/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getProjectLocation()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProjectLocation$Response(params: GetProjectLocation$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return getProjectLocation(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getProjectLocation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getProjectLocation(params: GetProjectLocation$Params, context?: HttpContext): Observable<string> {\r\n    return this.getProjectLocation$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `countProjectsByStatus()` */\r\n  static readonly CountProjectsByStatusPath = '/project/getProjectsByStatus/{status}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `countProjectsByStatus()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  countProjectsByStatus$Response(params: CountProjectsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return countProjectsByStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `countProjectsByStatus$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  countProjectsByStatus(params: CountProjectsByStatus$Params, context?: HttpContext): Observable<number> {\r\n    return this.countProjectsByStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findProjectById()` */\r\n  static readonly FindProjectByIdPath = '/project/getProjectById/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findProjectById()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProjectById$Response(params: FindProjectById$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {\r\n    return findProjectById(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findProjectById$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProjectById(params: FindProjectById$Params, context?: HttpContext): Observable<Project> {\r\n    return this.findProjectById$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Project>): Project => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getAllProjects()` */\r\n  static readonly GetAllProjectsPath = '/project/getAllProjects';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllProjects()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllProjects$Response(params?: GetAllProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Project>>> {\r\n    return getAllProjects(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllProjects$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllProjects(params?: GetAllProjects$Params, context?: HttpContext): Observable<Array<Project>> {\r\n    return this.getAllProjects$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Project>>): Array<Project> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getAverageDuration()` */\r\n  static readonly GetAverageDurationPath = '/project/averageDuration';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAverageDuration()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAverageDuration$Response(params?: GetAverageDuration$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return getAverageDuration(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAverageDuration$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAverageDuration(params?: GetAverageDuration$Params, context?: HttpContext): Observable<number> {\r\n    return this.getAverageDuration$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteProject()` */\r\n  static readonly DeleteProjectPath = '/project/deleteProject/{idProject}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteProject()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteProject$Response(params: DeleteProject$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return deleteProject(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteProject$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteProject(params: DeleteProject$Params, context?: HttpContext): Observable<void> {\r\n    return this.deleteProject$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}