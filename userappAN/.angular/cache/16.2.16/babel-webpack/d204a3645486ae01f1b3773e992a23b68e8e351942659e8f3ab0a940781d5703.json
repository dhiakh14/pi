{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { addTask } from '../fn/task-controller/add-task';\nimport { addTasks } from '../fn/task-controller/add-tasks';\nimport { chatAboutTask } from '../fn/task-controller/chat-about-task';\nimport { chatAboutTasks } from '../fn/task-controller/chat-about-tasks';\nimport { deleteTask } from '../fn/task-controller/delete-task';\nimport { deleteTasksByProjectId } from '../fn/task-controller/delete-tasks-by-project-id';\nimport { exportTasksToCsv } from '../fn/task-controller/export-tasks-to-csv';\nimport { getAllTasks } from '../fn/task-controller/get-all-tasks';\nimport { getStatusTrendAnalysis } from '../fn/task-controller/get-status-trend-analysis';\nimport { getTaskById } from '../fn/task-controller/get-task-by-id';\nimport { getTaskRecommendations } from '../fn/task-controller/get-task-recommendations';\nimport { getTasksByProjectId } from '../fn/task-controller/get-tasks-by-project-id';\nimport { predictDuration } from '../fn/task-controller/predict-duration';\nimport { updateTask } from '../fn/task-controller/update-task';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class TaskControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `updateTask()` */\n  static {\n    this.UpdateTaskPath = '/Task/updateTask/{idTask}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateTask()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateTask$Response(params, context) {\n    return updateTask(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `updateTask$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateTask(params, context) {\n    return this.updateTask$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `chatAboutTasks()` */\n  static {\n    this.ChatAboutTasksPath = '/Task/taskchatAboutTaskss';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `chatAboutTasks()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  chatAboutTasks$Response(params, context) {\n    return chatAboutTasks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `chatAboutTasks$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  chatAboutTasks(params, context) {\n    return this.chatAboutTasks$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `predictDuration()` */\n  static {\n    this.PredictDurationPath = '/Task/predictDuration';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `predictDuration()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  predictDuration$Response(params, context) {\n    return predictDuration(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `predictDuration$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  predictDuration(params, context) {\n    return this.predictDuration$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `chatAboutTask()` */\n  static {\n    this.ChatAboutTaskPath = '/Task/chatAboutTask/{taskId}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `chatAboutTask()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  chatAboutTask$Response(params, context) {\n    return chatAboutTask(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `chatAboutTask$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  chatAboutTask(params, context) {\n    return this.chatAboutTask$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `addTasks()` */\n  static {\n    this.AddTasksPath = '/Task/addTasks';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addTasks()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addTasks$Response(params, context) {\n    return addTasks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addTasks$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addTasks(params, context) {\n    return this.addTasks$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `addTask()` */\n  static {\n    this.AddTaskPath = '/Task/addTask';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addTask()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addTask$Response(params, context) {\n    return addTask(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addTask$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  addTask(params, context) {\n    return this.addTask$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getTaskRecommendations()` */\n  static {\n    this.GetTaskRecommendationsPath = '/Task/tasks/{taskId}/recommendations';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTaskRecommendations()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTaskRecommendations$Response(params, context) {\n    return getTaskRecommendations(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getTaskRecommendations$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTaskRecommendations(params, context) {\n    return this.getTaskRecommendations$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getTasksByProjectId()` */\n  static {\n    this.GetTasksByProjectIdPath = '/Task/getTasksByProject/{projectId}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTasksByProjectId()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTasksByProjectId$Response(params, context) {\n    return getTasksByProjectId(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getTasksByProjectId$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTasksByProjectId(params, context) {\n    return this.getTasksByProjectId$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getTaskById()` */\n  static {\n    this.GetTaskByIdPath = '/Task/getTaskById/{id}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTaskById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTaskById$Response(params, context) {\n    return getTaskById(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getTaskById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTaskById(params, context) {\n    return this.getTaskById$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllTasks()` */\n  static {\n    this.GetAllTasksPath = '/Task/getAllTasks';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllTasks()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllTasks$Response(params, context) {\n    return getAllTasks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllTasks(params, context) {\n    return this.getAllTasks$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `exportTasksToCsv()` */\n  static {\n    this.ExportTasksToCsvPath = '/Task/export';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `exportTasksToCsv()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  exportTasksToCsv$Response(params, context) {\n    return exportTasksToCsv(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `exportTasksToCsv$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  exportTasksToCsv(params, context) {\n    return this.exportTasksToCsv$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getStatusTrendAnalysis()` */\n  static {\n    this.GetStatusTrendAnalysisPath = '/Task/analysis/trends';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatusTrendAnalysis()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusTrendAnalysis$Response(params, context) {\n    return getStatusTrendAnalysis(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatusTrendAnalysis$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusTrendAnalysis(params, context) {\n    return this.getStatusTrendAnalysis$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteTasksByProjectId()` */\n  static {\n    this.DeleteTasksByProjectIdPath = '/Task/deleteTasksByProject/{projectId}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteTasksByProjectId()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTasksByProjectId$Response(params, context) {\n    return deleteTasksByProjectId(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteTasksByProjectId$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTasksByProjectId(params, context) {\n    return this.deleteTasksByProjectId$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteTask()` */\n  static {\n    this.DeleteTaskPath = '/Task/deleteTask/{id}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteTask()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTask$Response(params, context) {\n    return deleteTask(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteTask$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteTask(params, context) {\n    return this.deleteTask$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function TaskControllerService_Factory(t) {\n      return new (t || TaskControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskControllerService,\n      factory: TaskControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","addTask","addTasks","chatAboutTask","chatAboutTasks","deleteTask","deleteTasksByProjectId","exportTasksToCsv","getAllTasks","getStatusTrendAnalysis","getTaskById","getTaskRecommendations","getTasksByProjectId","predictDuration","updateTask","TaskControllerService","constructor","config","http","UpdateTaskPath","updateTask$Response","params","context","rootUrl","pipe","r","body","ChatAboutTasksPath","chatAboutTasks$Response","PredictDurationPath","predictDuration$Response","ChatAboutTaskPath","chatAboutTask$Response","AddTasksPath","addTasks$Response","AddTaskPath","addTask$Response","GetTaskRecommendationsPath","getTaskRecommendations$Response","GetTasksByProjectIdPath","getTasksByProjectId$Response","GetTaskByIdPath","getTaskById$Response","GetAllTasksPath","getAllTasks$Response","ExportTasksToCsvPath","exportTasksToCsv$Response","GetStatusTrendAnalysisPath","getStatusTrendAnalysis$Response","DeleteTasksByProjectIdPath","deleteTasksByProjectId$Response","DeleteTaskPath","deleteTask$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\services1\\services\\task-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { addTask } from '../fn/task-controller/add-task';\r\nimport { AddTask$Params } from '../fn/task-controller/add-task';\r\nimport { addTasks } from '../fn/task-controller/add-tasks';\r\nimport { AddTasks$Params } from '../fn/task-controller/add-tasks';\r\nimport { chatAboutTask } from '../fn/task-controller/chat-about-task';\r\nimport { ChatAboutTask$Params } from '../fn/task-controller/chat-about-task';\r\nimport { chatAboutTasks } from '../fn/task-controller/chat-about-tasks';\r\nimport { ChatAboutTasks$Params } from '../fn/task-controller/chat-about-tasks';\r\nimport { deleteTask } from '../fn/task-controller/delete-task';\r\nimport { DeleteTask$Params } from '../fn/task-controller/delete-task';\r\nimport { deleteTasksByProjectId } from '../fn/task-controller/delete-tasks-by-project-id';\r\nimport { DeleteTasksByProjectId$Params } from '../fn/task-controller/delete-tasks-by-project-id';\r\nimport { exportTasksToCsv } from '../fn/task-controller/export-tasks-to-csv';\r\nimport { ExportTasksToCsv$Params } from '../fn/task-controller/export-tasks-to-csv';\r\nimport { getAllTasks } from '../fn/task-controller/get-all-tasks';\r\nimport { GetAllTasks$Params } from '../fn/task-controller/get-all-tasks';\r\nimport { getStatusTrendAnalysis } from '../fn/task-controller/get-status-trend-analysis';\r\nimport { GetStatusTrendAnalysis$Params } from '../fn/task-controller/get-status-trend-analysis';\r\nimport { getTaskById } from '../fn/task-controller/get-task-by-id';\r\nimport { GetTaskById$Params } from '../fn/task-controller/get-task-by-id';\r\nimport { getTaskRecommendations } from '../fn/task-controller/get-task-recommendations';\r\nimport { GetTaskRecommendations$Params } from '../fn/task-controller/get-task-recommendations';\r\nimport { getTasksByProjectId } from '../fn/task-controller/get-tasks-by-project-id';\r\nimport { GetTasksByProjectId$Params } from '../fn/task-controller/get-tasks-by-project-id';\r\nimport { predictDuration } from '../fn/task-controller/predict-duration';\r\nimport { PredictDuration$Params } from '../fn/task-controller/predict-duration';\r\nimport { Task } from '../models/task';\r\nimport { updateTask } from '../fn/task-controller/update-task';\r\nimport { UpdateTask$Params } from '../fn/task-controller/update-task';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TaskControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `updateTask()` */\r\n  static readonly UpdateTaskPath = '/Task/updateTask/{idTask}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateTask()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {\r\n    return updateTask(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateTask$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<Task> {\r\n    return this.updateTask$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Task>): Task => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `chatAboutTasks()` */\r\n  static readonly ChatAboutTasksPath = '/Task/taskchatAboutTaskss';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `chatAboutTasks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  chatAboutTasks$Response(params: ChatAboutTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return chatAboutTasks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `chatAboutTasks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  chatAboutTasks(params: ChatAboutTasks$Params, context?: HttpContext): Observable<string> {\r\n    return this.chatAboutTasks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `predictDuration()` */\r\n  static readonly PredictDurationPath = '/Task/predictDuration';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `predictDuration()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  predictDuration$Response(params: PredictDuration$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n[key: string]: number;\r\n}>> {\r\n    return predictDuration(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `predictDuration$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  predictDuration(params: PredictDuration$Params, context?: HttpContext): Observable<{\r\n[key: string]: number;\r\n}> {\r\n    return this.predictDuration$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n[key: string]: number;\r\n}>): {\r\n[key: string]: number;\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `chatAboutTask()` */\r\n  static readonly ChatAboutTaskPath = '/Task/chatAboutTask/{taskId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `chatAboutTask()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  chatAboutTask$Response(params: ChatAboutTask$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return chatAboutTask(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `chatAboutTask$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  chatAboutTask(params: ChatAboutTask$Params, context?: HttpContext): Observable<string> {\r\n    return this.chatAboutTask$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `addTasks()` */\r\n  static readonly AddTasksPath = '/Task/addTasks';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addTasks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addTasks$Response(params: AddTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {\r\n    return addTasks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addTasks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addTasks(params: AddTasks$Params, context?: HttpContext): Observable<Array<Task>> {\r\n    return this.addTasks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `addTask()` */\r\n  static readonly AddTaskPath = '/Task/addTask';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addTask()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addTask$Response(params: AddTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {\r\n    return addTask(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addTask$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addTask(params: AddTask$Params, context?: HttpContext): Observable<Task> {\r\n    return this.addTask$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Task>): Task => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getTaskRecommendations()` */\r\n  static readonly GetTaskRecommendationsPath = '/Task/tasks/{taskId}/recommendations';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getTaskRecommendations()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTaskRecommendations$Response(params: GetTaskRecommendations$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return getTaskRecommendations(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getTaskRecommendations$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTaskRecommendations(params: GetTaskRecommendations$Params, context?: HttpContext): Observable<string> {\r\n    return this.getTaskRecommendations$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getTasksByProjectId()` */\r\n  static readonly GetTasksByProjectIdPath = '/Task/getTasksByProject/{projectId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getTasksByProjectId()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTasksByProjectId$Response(params: GetTasksByProjectId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {\r\n    return getTasksByProjectId(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getTasksByProjectId$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTasksByProjectId(params: GetTasksByProjectId$Params, context?: HttpContext): Observable<Array<Task>> {\r\n    return this.getTasksByProjectId$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getTaskById()` */\r\n  static readonly GetTaskByIdPath = '/Task/getTaskById/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getTaskById()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {\r\n    return getTaskById(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getTaskById$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<Task> {\r\n    return this.getTaskById$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Task>): Task => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getAllTasks()` */\r\n  static readonly GetAllTasksPath = '/Task/getAllTasks';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllTasks()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllTasks$Response(params?: GetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {\r\n    return getAllTasks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllTasks(params?: GetAllTasks$Params, context?: HttpContext): Observable<Array<Task>> {\r\n    return this.getAllTasks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `exportTasksToCsv()` */\r\n  static readonly ExportTasksToCsvPath = '/Task/export';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `exportTasksToCsv()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  exportTasksToCsv$Response(params?: ExportTasksToCsv$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return exportTasksToCsv(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `exportTasksToCsv$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  exportTasksToCsv(params?: ExportTasksToCsv$Params, context?: HttpContext): Observable<string> {\r\n    return this.exportTasksToCsv$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getStatusTrendAnalysis()` */\r\n  static readonly GetStatusTrendAnalysisPath = '/Task/analysis/trends';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getStatusTrendAnalysis()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getStatusTrendAnalysis$Response(params?: GetStatusTrendAnalysis$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return getStatusTrendAnalysis(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getStatusTrendAnalysis$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getStatusTrendAnalysis(params?: GetStatusTrendAnalysis$Params, context?: HttpContext): Observable<string> {\r\n    return this.getStatusTrendAnalysis$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteTasksByProjectId()` */\r\n  static readonly DeleteTasksByProjectIdPath = '/Task/deleteTasksByProject/{projectId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteTasksByProjectId()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteTasksByProjectId$Response(params: DeleteTasksByProjectId$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return deleteTasksByProjectId(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteTasksByProjectId$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteTasksByProjectId(params: DeleteTasksByProjectId$Params, context?: HttpContext): Observable<string> {\r\n    return this.deleteTasksByProjectId$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteTask()` */\r\n  static readonly DeleteTaskPath = '/Task/deleteTask/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteTask()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return deleteTask(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteTask$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {\r\n    return this.deleteTask$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}