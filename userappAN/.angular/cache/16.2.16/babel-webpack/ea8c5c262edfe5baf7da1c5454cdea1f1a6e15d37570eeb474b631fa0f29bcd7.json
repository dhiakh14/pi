{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { addRole } from '../fn/role-controller/add-role';\nimport { getRoles } from '../fn/role-controller/get-roles';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class RoleControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `addRole()` */\n  static {\n    this.AddRolePath = '/roles/add';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addRole()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addRole$Response(params, context) {\n    return addRole(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addRole$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  addRole(params, context) {\n    return this.addRole$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getRoles()` */\n  static {\n    this.GetRolesPath = '/roles/getRoles';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRoles()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRoles$Response(params, context) {\n    return getRoles(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getRoles$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRoles(params, context) {\n    return this.getRoles$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function RoleControllerService_Factory(t) {\n      return new (t || RoleControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleControllerService,\n      factory: RoleControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","addRole","getRoles","RoleControllerService","constructor","config","http","AddRolePath","addRole$Response","params","context","rootUrl","pipe","r","body","GetRolesPath","getRoles$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\services\\services\\role-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { addRole } from '../fn/role-controller/add-role';\r\nimport { AddRole$Params } from '../fn/role-controller/add-role';\r\nimport { getRoles } from '../fn/role-controller/get-roles';\r\nimport { GetRoles$Params } from '../fn/role-controller/get-roles';\r\nimport { Role } from '../models/role';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoleControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `addRole()` */\r\n  static readonly AddRolePath = '/roles/add';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addRole()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  addRole$Response(params: AddRole$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return addRole(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addRole$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  addRole(params: AddRole$Params, context?: HttpContext): Observable<string> {\r\n    return this.addRole$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getRoles()` */\r\n  static readonly GetRolesPath = '/roles/getRoles';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRoles()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRoles$Response(params?: GetRoles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Role>>> {\r\n    return getRoles(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getRoles$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRoles(params?: GetRoles$Params, context?: HttpContext): Observable<Array<Role>> {\r\n    return this.getRoles$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Role>>): Array<Role> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"AAOA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,OAAO,QAAQ,gCAAgC;AAExD,SAASC,QAAQ,QAAQ,iCAAiC;;;;AAK1D,OAAM,MAAOC,qBAAsB,SAAQH,WAAW;EACpDI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAC,WAAW,GAAG,YAAY;EAAC;EAE3C;;;;;;EAMAC,gBAAgBA,CAACC,MAAsB,EAAEC,OAAqB;IAC5D,OAAOT,OAAO,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACK,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC1D;EAEA;;;;;;EAMAT,OAAOA,CAACQ,MAAsB,EAAEC,OAAqB;IACnD,OAAO,IAAI,CAACF,gBAAgB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAChDb,GAAG,CAAEc,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;EAEA;;IACgB,KAAAC,YAAY,GAAG,iBAAiB;EAAC;EAEjD;;;;;;EAMAC,iBAAiBA,CAACP,MAAwB,EAAEC,OAAqB;IAC/D,OAAOR,QAAQ,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACK,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAR,QAAQA,CAACO,MAAwB,EAAEC,OAAqB;IACtD,OAAO,IAAI,CAACM,iBAAiB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDb,GAAG,CAAEc,CAAkC,IAAkBA,CAAC,CAACC,IAAI,CAAC,CACjE;EACH;;;uBArDWX,qBAAqB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAArBnB,qBAAqB;MAAAoB,OAAA,EAArBpB,qBAAqB,CAAAqB,IAAA;MAAAC,UAAA,EADR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}