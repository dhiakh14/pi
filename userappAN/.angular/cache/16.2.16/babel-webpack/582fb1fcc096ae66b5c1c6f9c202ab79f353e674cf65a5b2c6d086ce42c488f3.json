{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { deleteGanttChart } from '../fn/gantt-chart-controller/delete-gantt-chart';\nimport { getAllGanttCharts } from '../fn/gantt-chart-controller/get-all-gantt-charts';\nimport { getGanttChartById } from '../fn/gantt-chart-controller/get-gantt-chart-by-id';\nimport { getTasksByGanttChartId } from '../fn/gantt-chart-controller/get-tasks-by-gantt-chart-id';\nimport { saveGanttChart } from '../fn/gantt-chart-controller/save-gantt-chart';\nimport { updateGanttChart } from '../fn/gantt-chart-controller/update-gantt-chart';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class GanttChartControllerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `updateGanttChart()` */\n  static {\n    this.UpdateGanttChartPath = '/gantt-chart/update/{id}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateGanttChart()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateGanttChart$Response(params, context) {\n    return updateGanttChart(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `updateGanttChart$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateGanttChart(params, context) {\n    return this.updateGanttChart$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `saveGanttChart()` */\n  static {\n    this.SaveGanttChartPath = '/gantt-chart/save';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `saveGanttChart()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveGanttChart$Response(params, context) {\n    return saveGanttChart(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `saveGanttChart$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveGanttChart(params, context) {\n    return this.saveGanttChart$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getTasksByGanttChartId()` */\n  static {\n    this.GetTasksByGanttChartIdPath = '/gantt-chart/{ganttChartId}/tasks';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTasksByGanttChartId()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTasksByGanttChartId$Response(params, context) {\n    return getTasksByGanttChartId(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getTasksByGanttChartId$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTasksByGanttChartId(params, context) {\n    return this.getTasksByGanttChartId$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getGanttChartById()` */\n  static {\n    this.GetGanttChartByIdPath = '/gantt-chart/getGanttChartById/{id}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getGanttChartById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getGanttChartById$Response(params, context) {\n    return getGanttChartById(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getGanttChartById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getGanttChartById(params, context) {\n    return this.getGanttChartById$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllGanttCharts()` */\n  static {\n    this.GetAllGanttChartsPath = '/gantt-chart/all';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllGanttCharts()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllGanttCharts$Response(params, context) {\n    return getAllGanttCharts(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllGanttCharts$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllGanttCharts(params, context) {\n    return this.getAllGanttCharts$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteGanttChart()` */\n  static {\n    this.DeleteGanttChartPath = '/gantt-chart/deleteGanttChart/{id}';\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteGanttChart()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteGanttChart$Response(params, context) {\n    return deleteGanttChart(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteGanttChart$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteGanttChart(params, context) {\n    return this.deleteGanttChart$Response(params, context).pipe(map(r => r.body));\n  }\n  static {\n    this.ɵfac = function GanttChartControllerService_Factory(t) {\n      return new (t || GanttChartControllerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GanttChartControllerService,\n      factory: GanttChartControllerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","BaseService","deleteGanttChart","getAllGanttCharts","getGanttChartById","getTasksByGanttChartId","saveGanttChart","updateGanttChart","GanttChartControllerService","constructor","config","http","UpdateGanttChartPath","updateGanttChart$Response","params","context","rootUrl","pipe","r","body","SaveGanttChartPath","saveGanttChart$Response","GetTasksByGanttChartIdPath","getTasksByGanttChartId$Response","GetGanttChartByIdPath","getGanttChartById$Response","GetAllGanttChartsPath","getAllGanttCharts$Response","DeleteGanttChartPath","deleteGanttChart$Response","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\moham\\Documents\\GitHub\\pi\\userappAN\\src\\app\\services1\\services\\gantt-chart-controller.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* Code generated by ng-openapi-gen DO NOT EDIT. */\r\n\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { deleteGanttChart } from '../fn/gantt-chart-controller/delete-gantt-chart';\r\nimport { DeleteGanttChart$Params } from '../fn/gantt-chart-controller/delete-gantt-chart';\r\nimport { GanttChart } from '../models/gantt-chart';\r\nimport { getAllGanttCharts } from '../fn/gantt-chart-controller/get-all-gantt-charts';\r\nimport { GetAllGanttCharts$Params } from '../fn/gantt-chart-controller/get-all-gantt-charts';\r\nimport { getGanttChartById } from '../fn/gantt-chart-controller/get-gantt-chart-by-id';\r\nimport { GetGanttChartById$Params } from '../fn/gantt-chart-controller/get-gantt-chart-by-id';\r\nimport { getTasksByGanttChartId } from '../fn/gantt-chart-controller/get-tasks-by-gantt-chart-id';\r\nimport { GetTasksByGanttChartId$Params } from '../fn/gantt-chart-controller/get-tasks-by-gantt-chart-id';\r\nimport { saveGanttChart } from '../fn/gantt-chart-controller/save-gantt-chart';\r\nimport { SaveGanttChart$Params } from '../fn/gantt-chart-controller/save-gantt-chart';\r\nimport { Task } from '../models/task';\r\nimport { updateGanttChart } from '../fn/gantt-chart-controller/update-gantt-chart';\r\nimport { UpdateGanttChart$Params } from '../fn/gantt-chart-controller/update-gantt-chart';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GanttChartControllerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `updateGanttChart()` */\r\n  static readonly UpdateGanttChartPath = '/gantt-chart/update/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateGanttChart()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateGanttChart$Response(params: UpdateGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {\r\n    return updateGanttChart(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateGanttChart$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  updateGanttChart(params: UpdateGanttChart$Params, context?: HttpContext): Observable<GanttChart> {\r\n    return this.updateGanttChart$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `saveGanttChart()` */\r\n  static readonly SaveGanttChartPath = '/gantt-chart/save';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `saveGanttChart()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveGanttChart$Response(params: SaveGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {\r\n    return saveGanttChart(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `saveGanttChart$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveGanttChart(params: SaveGanttChart$Params, context?: HttpContext): Observable<GanttChart> {\r\n    return this.saveGanttChart$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getTasksByGanttChartId()` */\r\n  static readonly GetTasksByGanttChartIdPath = '/gantt-chart/{ganttChartId}/tasks';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getTasksByGanttChartId()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTasksByGanttChartId$Response(params: GetTasksByGanttChartId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {\r\n    return getTasksByGanttChartId(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getTasksByGanttChartId$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getTasksByGanttChartId(params: GetTasksByGanttChartId$Params, context?: HttpContext): Observable<Array<Task>> {\r\n    return this.getTasksByGanttChartId$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getGanttChartById()` */\r\n  static readonly GetGanttChartByIdPath = '/gantt-chart/getGanttChartById/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getGanttChartById()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getGanttChartById$Response(params: GetGanttChartById$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {\r\n    return getGanttChartById(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getGanttChartById$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getGanttChartById(params: GetGanttChartById$Params, context?: HttpContext): Observable<GanttChart> {\r\n    return this.getGanttChartById$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `getAllGanttCharts()` */\r\n  static readonly GetAllGanttChartsPath = '/gantt-chart/all';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllGanttCharts()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllGanttCharts$Response(params?: GetAllGanttCharts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GanttChart>>> {\r\n    return getAllGanttCharts(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllGanttCharts$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllGanttCharts(params?: GetAllGanttCharts$Params, context?: HttpContext): Observable<Array<GanttChart>> {\r\n    return this.getAllGanttCharts$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<GanttChart>>): Array<GanttChart> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteGanttChart()` */\r\n  static readonly DeleteGanttChartPath = '/gantt-chart/deleteGanttChart/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteGanttChart()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteGanttChart$Response(params: DeleteGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return deleteGanttChart(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteGanttChart$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteGanttChart(params: DeleteGanttChart$Params, context?: HttpContext): Observable<void> {\r\n    return this.deleteGanttChart$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}